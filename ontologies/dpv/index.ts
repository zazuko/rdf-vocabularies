/* This file was automatically generated. Do not edit by hand. */

const {
  dcterms,
  rdf,
  ns3,
  skos,
  dcat,
  foaf,
  xsd,
  rdfs,
  vs,
  ns10,
  ns11,
  vann,
  ns13,
  ns14,
  ns15,
  ns16,
  ns17,
  ns18,
  ns19,
  ns20,
  ns21,
  ns22,
  ns23,
  ns24,
  ns25,
  ns26,
  ns27,
  ns28,
  ns29,
  ns30,
  ns31,
  ns32,
  ns33,
  ns34,
  ns35,
  ns36,
  ns37,
  ns38,
  ns39,
  ns40,
  owl
} = {
  'dcterms': 'http://purl.org/dc/terms/',
  'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
  'ns3': 'https://w3id.org/dpv#',
  'skos': 'http://www.w3.org/2004/02/skos/core#',
  'dcat': 'http://www.w3.org/ns/dcat#',
  'foaf': 'http://xmlns.com/foaf/0.1/',
  'xsd': 'http://www.w3.org/2001/XMLSchema#',
  'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
  'vs': 'http://www.w3.org/2003/06/sw-vocab-status/ns#',
  'ns10': 'https://specialprivacy.ercim.eu/vocabs/purposes#',
  'ns11': 'http://purl.org/',
  'vann': 'http://purl.org/vocab/vann/',
  'ns13': 'https://w3id.org/dpv/examples#',
  'ns14': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_2/',
  'ns15': 'https://www.enisa.europa.eu/publications/reference-incident-classification-taxonomy/',
  'ns16': 'https://specialprivacy.ercim.eu/vocabs/',
  'ns17': 'https://specialprivacy.ercim.eu/vocabs/processing#',
  'ns18': 'https://www.iso.org/standard/',
  'ns19': 'https://www.enisa.europa.eu/publications/',
  'ns20': 'https://w3id.org/',
  'ns21': 'https://www.privacycommission.be/nl/',
  'ns22': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_7/',
  'ns23': 'https://edpb.europa.eu/our-work-tools/our-documents/recommendations/',
  'ns24': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_8/',
  'ns25': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_37/',
  'ns26': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_1/',
  'ns27': 'https://nvlpubs.nist.gov/nistpubs/ir/2015/',
  'ns28': 'https://www.w3.org/community/dpvcg/',
  'ns29': 'https://specialprivacy.ercim.eu/vocabs/data#',
  'ns30': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_26/',
  'ns31': 'https://ec.europa.eu/newsroom/article29/items/',
  'ns32': 'https://specialprivacy.ercim.eu/langs/usage-policy#',
  'ns33': 'https://specialprivacy.ercim.eu/',
  'ns34': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_5/',
  'ns35': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_9/',
  'ns36': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_27/',
  'ns37': 'https://www.iso.org/',
  'ns38': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_9/par_1/',
  'ns39': 'https://eur-lex.europa.eu/eli/reg/2016/679/art_4/par_10/',
  'ns40': 'https://www.w3.org/Consortium/Legal/2015/',
  'owl': 'http://www.w3.org/2002/07/owl#'
}

export default ({ literal, namedNode, quad }: import('rdf-js').DataFactory): import('rdf-js').Quad[] => {
  return [
    quad(
      namedNode(`${dcterms}accessRights`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}accessRights`),
      namedNode(`${skos}prefLabel`),
      literal(`dct:accessRights`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}accessRights`),
      namedNode(`${skos}scopeNote`),
      literal(`Specfiying constraints on access associated with Rights Exercising (e.g. User must log in) or access to provided data (e.g. access via link)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}format`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}format`),
      namedNode(`${skos}prefLabel`),
      literal(`dct:format`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}format`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying the format of provided information, for example a CSV dataset`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}hasPart`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}hasPart`),
      namedNode(`${skos}prefLabel`),
      literal(`dct:hasPart`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}hasPart`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying a RightExerciseRecord has RightExerciseActivity as part of its records`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}isPartOf`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}isPartOf`),
      namedNode(`${skos}prefLabel`),
      literal(`dct:isPartOf`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}isPartOf`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying a RightExerciseActivity is part of a RightExerciseRecord`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}valid`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}valid`),
      namedNode(`${skos}prefLabel`),
      literal(`dct:valid`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcterms}valid`),
      namedNode(`${skos}scopeNote`),
      literal(`Specfiying the temporal validity of an activity associated with Right Exercise. For example, limits on duration for providing or accessing provided information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcat}Resource`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcat}Resource`),
      namedNode(`${skos}prefLabel`),
      literal(`dcat:Resource`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${dcat}Resource`),
      namedNode(`${skos}scopeNote`),
      literal(`A dataset, data service, or any other resource associated with Right Exercise - such as for providing a copy of personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${foaf}page`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${foaf}page`),
      namedNode(`${skos}prefLabel`),
      literal(`foaf:page`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${foaf}page`),
      namedNode(`${skos}scopeNote`),
      literal(`Indicates a web page or document providing information or functionality associated with a Right Exercise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${rdf}type`),
      namedNode(`${skos}ConceptScheme`),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${skos}hasTopConcept`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${skos}hasTopConcept`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${skos}hasTopConcept`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${skos}hasTopConcept`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(ns3),
      namedNode(`${skos}hasTopConcept`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting or assisting with research conducted in an academic context e.g. within universities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${skos}prefLabel`),
      literal(`Academic Research`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Education`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicResearch`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${skos}definition`),
      literal(`Organisations related to academia or scientific pursuits e.g. Universities, Schools, Research Bodies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Academic or Scientific Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${skos}definition`),
      literal(`to access data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${skos}prefLabel`),
      literal(`Access`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Access`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0016`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}definition`),
      literal(`Methods which restrict access to a place or resource`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UsageControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${skos}prefLabel`),
      literal(`Access Control Method`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${skos}definition`),
      literal(`Account Management refers to purposes associated with account management, such as to create, provide, maintain, and manage accounts`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Account Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AccountManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${skos}definition`),
      literal(`to come into possession or control of the data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${skos}prefLabel`),
      literal(`Acquire`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Acquire`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${skos}definition`),
      literal(`The right(s) applicable, provided, or expected that need to be (actively) exercised`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${skos}note`),
      literal(`Active rights require the entity to expressly exercise them. For example, a Data Subject exercising their right to withdraw their consent.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${skos}prefLabel`),
      literal(`Active Right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActiveRight`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${skos}definition`),
      literal(`State of an activity that has completed i.e. is fully in the past`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Completed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${skos}definition`),
      literal(`State of an activity that was occuring in the past, and has been halted or paused or stoped`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Halted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityHalted`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${skos}definition`),
      literal(`Monitoring of activities including assessing whether they have been successfully initiated and completed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Monitoring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${skos}definition`),
      literal(`State of an activity that could not be completed, but has reached some end state`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${skos}note`),
      literal(`This relates to a 'Stop' state as distinct from a 'Halt' state. It makes no comments on whether the Acitivity can be resumed or continued towards completion.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${skos}prefLabel`),
      literal(`Acitivity Not Completed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${skos}definition`),
      literal(`State of an activity occuring in continuation i.e. currently ongoing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Ongoing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${skos}definition`),
      literal(`State of an activity being proposed or planned i.e. yet to occur`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Proposed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityProposed`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}definition`),
      literal(`Status associated with activity operations and lifecycles`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityHalted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityProposed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Activity Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ActivityStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${skos}definition`),
      literal(`to modify the data, often rewritten into a new form for a new use`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${skos}prefLabel`),
      literal(`Adapt`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adapt`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${skos}definition`),
      literal(`A natural person that is not a child i.e. has attained some legally specified age of adulthood`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${skos}prefLabel`),
      literal(`Adult`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Adult`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting advertising i.e. process or artefact used to call attention to a product, service, etc. through announcements, notices, or other forms of communication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}note`),
      literal(`Advertising is a subset of Marketing. Advertising by itself does not indicate 'personalisation' i.e. personalised ads.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${skos}prefLabel`),
      literal(`Advertising`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Advertising`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${skos}definition`),
      literal(`The algorithmic logic applied or used`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${skos}note`),
      literal(`Algorithmic Logic is intended as a broad concept for explaining the use of algorithms and automated decisions making within Processing. To describe the actual algorithm, see the Algorithm concept.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${skos}prefLabel`),
      literal(`Algorithmic Logic`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${skos}definition`),
      literal(`to adjust the data to be in relation to another data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${skos}prefLabel`),
      literal(`Align`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Align`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${skos}definition`),
      literal(`to change the data without changing it into something else`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Modify`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${skos}prefLabel`),
      literal(`Alter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Alter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${skos}definition`),
      literal(`to study or examine the data in detail`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${skos}prefLabel`),
      literal(`Analyse`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Analyse`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Analyse`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns18}45123.html`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${skos}definition`),
      literal(`Anonymisation is the process by which data is irreversibly altered in such a way that a data subject can no longer be identified directly or indirectly, either by the entity holding the data alone or in collaboration with other entities and information sources`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Anonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${skos}definition`),
      literal(`to irreversibly alter personal data in such a way that an unique data subject can no longer be identified directly or indirectly or in combination with other data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${skos}prefLabel`),
      literal(`Anonymise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Anonymise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Anonymise`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}NonPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that has been (fully and completely) anonymised so that it is no longer considered Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${skos}note`),
      literal(`It is advised to carefully consider indicating data is fully or completely anonymised by determining whether the data by itself or in combination with other data can identify a person. Failing this condition, the data should be denoted as PseudonymisedData. To indicate data is anonymised only for a specified entity (e.g. within an organisation), the concept ContextuallyAnonymisedData (as subclass of PseudonymisedData) should be used instead of AnonymisedData.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${skos}prefLabel`),
      literal(`Anonymised Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AnonymisedData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}NonPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with activities that detect, prevent, mitigate, or perform other activities for anti-terrorism`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${skos}prefLabel`),
      literal(`Anti-Terrorism Operations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are applicants in some context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}JobApplicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${skos}prefLabel`),
      literal(`Applicant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Applicant`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${skos}definition`),
      literal(`to assess data for some criteria`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${skos}prefLabel`),
      literal(`Assess`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assess`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}definition`),
      literal(`The document, plan, or process for assessment or determination towards a purpose e.g. assessment of legality or impact assessments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Assessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to management of assets`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Asset Management Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are asylum seekers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${skos}prefLabel`),
      literal(`Asylum Seeker`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${skos}definition`),
      literal(`Use of public-key cryptography or asymmetric cryptography involving a public and private pair of keys`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${skos}prefLabel`),
      literal(`Asymmetric Cryptography`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${skos}definition`),
      literal(`Use of asymmetric cryptography to encrypt data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${skos}prefLabel`),
      literal(`Asymmetric Encryption`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${skos}definition`),
      literal(`State of being approved through the audit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Approved`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditApproved`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-29`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${skos}definition`),
      literal(`State of being conditionally approved through the audit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${skos}note`),
      literal(`A "conditional approval" is intended to reflect states where the audit has identified further changes which must be implemented before considering the audit has been 'passed', without requiring another audit to validate them. This is distinct from the case where an audit has state 'rejected', which means changes must be made and submitted for review. The requirements of a 'conditional acceptance' are expected to be minor or not significant enough to warrant another audit to review them.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Conditionally Approved`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${skos}definition`),
      literal(`State where an audit is determined as not being required`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Not Required`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${skos}definition`),
      literal(`State of not being approved or being rejected through the audit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Rejected`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRejected`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${skos}definition`),
      literal(`State of an audit being requested whose outcome is not yet known`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Requested`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequested`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${skos}definition`),
      literal(`State where an audit is determined as being required but has not been conducted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Required`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditRequired`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}definition`),
      literal(`Status associated with Auditing or Investigation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditApproved`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditRejected`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditRequested`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Audit Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuditStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${skos}definition`),
      literal(`Use of Attribute Based Credentials (ABC) to perform and manage authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${skos}prefLabel`),
      literal(`Authentication using ABC`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${skos}definition`),
      literal(`Use of Privacy-enhacing Attribute Based Credentials (ABC) to perform and manage authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${skos}prefLabel`),
      literal(`Authentication using PABC`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}definition`),
      literal(`Protocols involving validation of identity i.e. authentication of a person or information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SingleSignOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Authentication Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}definition`),
      literal(`Procedures for determining authorisation through permission or authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CredentialManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}note`),
      literal(`non-technical authorisation procedures: How is it described on an organisational level, who gets access to the data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${skos}prefLabel`),
      literal(`Authorisation Procedure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${skos}definition`),
      literal(`Protocols involving authorisation of roles or profiles to determine permission, rights, or privileges`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Authorisation Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}definition`),
      literal(`An authority with the power to create or enforce laws, or determine their compliance.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NationalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${skos}prefLabel`),
      literal(`Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Authority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves automated decision making`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}note`),
      literal(`Automated decision making can be defined as “the ability to make decisions by technological means without human involvement.” (“Guidelines on Automated individual decision-making and Profiling for the purposes of Regulation 2016/679 (wp251rev.01)”, 2018, p. 8)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${skos}prefLabel`),
      literal(`Automated Decision Making`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}definition`),
      literal(`Processing that is automated and involves inputs by Humans`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}note`),
      literal(`For example, an algorithm that takes inputs from humans and performs operations based on them`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${skos}prefLabel`),
      literal(`Automated Processing with Human Input`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}definition`),
      literal(`Processing that is automated and involves oversight by Humans`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}note`),
      literal(`For example, a human watching metrics to ensure correctness of procedural values and outputs as processing takes place`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${skos}prefLabel`),
      literal(`Automated Processing with Human Oversight`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}definition`),
      literal(`Processing that is automated and involves review by Humans`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}note`),
      literal(`For example, a human verifying outputs of an algorithm for correctness or impact to individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${skos}prefLabel`),
      literal(`Automated Processing with Human Review`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}definition`),
      literal(`Contextual information about the degree of automation and human involvement associated with Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}note`),
      literal(`It is difficult to provide a formal definition of automation since any and all processing may be considered automation. This concept instead is intended to explicitly signal the utilisation of automation and its extent towards some context - such as decision making, and to indicate the involvement of humans.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Automation of Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${skos}definition`),
      literal(`Procedure where the background of an entity is assessed to identity vulnerabilities and threats due to their current or intended role`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${skos}prefLabel`),
      literal(`Background Checks`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPurpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRisk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BaseConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Base Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${skos}definition`),
      literal(`Impact(s) that acts as or causes benefits`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${skos}prefLabel`),
      literal(`Benefit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Benefit`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${skos}definition`),
      literal(`Use of biometric data for authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${skos}prefLabel`),
      literal(`Biometric Authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${skos}definition`),
      literal(`Certification mechanisms, seals, and marks for the purpose of demonstrating compliance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${skos}prefLabel`),
      literal(`Certification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Certification`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}definition`),
      literal(`Certifications, seals, and marks indicating compliance to regulations or practices`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Certification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Seal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${skos}prefLabel`),
      literal(`Certification and Seal`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CertificationSeal`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-25`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${skos}definition`),
      literal(`A 'child' is a natural legal person who is below a certain legal age depending on the legal jurisdiction.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${skos}note`),
      literal(`The legality of age defining a child varies by jurisdiction. In addition, 'child' is distinct from a 'minor'. For example, the legal age for consumption of alcohol can be 21, which makes a person of age 20 a 'minor' in this context. In other cases, 'minor' and 'child' are used interchangeably to refer to a person below some legally defined age.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${skos}prefLabel`),
      literal(`Child`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Child`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are citizens (for a jurisdiction)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${skos}prefLabel`),
      literal(`Citizen`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Citizen`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${skos}definition`),
      literal(`A region consisting of urban population and commerce`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${skos}prefLabel`),
      literal(`City`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}City`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Customer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are clients or recipients of services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${skos}prefLabel`),
      literal(`Client`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Client`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Customer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RemoteLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is in the 'cloud' i.e. a logical location operated over the internet`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Cloud Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CloudLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}RemoteLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${skos}definition`),
      literal(`A set of rules or procedures outlining the norms and practices for conducting activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${skos}prefLabel`),
      literal(`Code of Conduct`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0018`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${skos}definition`),
      literal(`to gather data from someone`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${skos}prefLabel`),
      literal(`Collect`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Collect`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Collect`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that has been collected from another source such as the Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}note`),
      literal(`To indicate the source of data, use the DataSource concept with the hasDataSource relation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Collected Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${skos}definition`),
      literal(`to join or merge data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${skos}prefLabel`),
      literal(`Combine`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Aggregate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Combine`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting research in a commercial setting or with intention to commercialise e.g. in a company or sponsored by a company`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${skos}prefLabel`),
      literal(`Commercial Research`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Develop`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommercialResearch`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${skos}definition`),
      literal(`Customer Care Communication refers to purposes associated with communicating with customers for assisting them, resolving issues, ensuring satisfaction, etc. in relation to services provided`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${skos}prefLabel`),
      literal(`Communication for Customer Care`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}definition`),
      literal(`Communication Management refers to purposes associated with providing or managing communication activities e.g. to send an email for notifying some information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}note`),
      literal(`This purpose by itself does not sufficiently and clearly indicate what the communication is about. As such, it is recommended to combine it with another purpose to indicate the application. For example, Communication of Payment.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Communication Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that is completely un-automated or fully manual`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${skos}note`),
      literal(`For example, a human performing some processing operation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Completely Manual Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${skos}definition`),
      literal(`State where the status of compliance has not been fully assessed, evaluated, or determined`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliance Indeterminate`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${skos}definition`),
      literal(`Monitoring of compliance (e.g. internal policy, regulations)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliance Monitoring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}definition`),
      literal(`Status associated with Compliance with some norms, objectives, or requirements`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Compliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonCompliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliance Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${skos}definition`),
      literal(`State where the status of compliance is unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliance Unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${skos}definition`),
      literal(`State where compliance cannot be achieved due to requirements being violated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${skos}note`),
      literal(`Changed from "violation of compliance" for consistency with other terms`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliance Violation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${skos}definition`),
      literal(`State of being fully compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${skos}prefLabel`),
      literal(`Compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Compliant`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Concept`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Concept`),
      namedNode(`${rdfs}subClassOf`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Concept`),
      namedNode(`${skos}prefLabel`),
      literal(`Concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}definition`),
      literal(`Status associated with conformance to a standard, guideline, code, or recommendation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Conformant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonConformant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Conformance Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${skos}definition`),
      literal(`State of being conformant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${skos}prefLabel`),
      literal(`Conformant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Conformant`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0022`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0023`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0024`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0025`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0026`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}definition`),
      literal(`Consent of the Data Subject for specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UninformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${skos}definition`),
      literal(`The state where the temporal or contextual validity of consent has 'expired'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when the obtained consent has been assigned a duration - which has lapsed or 'expired', making it invalid to be used further for processing data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Expired`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentExpired`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${skos}definition`),
      literal(`The state where consent has been given`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when the individual clicks on a button, ticks a checkbox, verbally agrees - or any other form that communicates their decision agreeing to the processing of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Given`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentGiven`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${skos}definition`),
      literal(`The state where consent has been deemed to be invalid`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${skos}note`),
      literal(`An example of this state is where an investigating authority or a court finds the collected consent did not meet requirements, and 'invalidates' both prior and future uses of it to carry out processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Invalidated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${skos}definition`),
      literal(`A Notice for information provision associated with Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentNotice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${skos}definition`),
      literal(`A Record of Consent or Consent related activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Record`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRecord`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${skos}definition`),
      literal(`The state where consent has been refused`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when the individual clicks on a 'disagree' or 'reject' or 'refuse' button, or leaves a checkbox unticked`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Refused`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRefused`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${skos}definition`),
      literal(`State where a request for consent has been deferred without a decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when the individual closes or dismisses a notice without making a decision. This state is intended for making the distinction between a notice being provided (as a consent request) and the individual interacting with the notice without making a decision - where the 'ignoring of a notice' is taken as consent being neither given nor refused`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Request Deferred`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${skos}definition`),
      literal(`State where a request for consent has been made and is awaiting a decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when a notice has been presented to the individual but they have not made a decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Requested`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRequested`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${skos}definition`),
      literal(`The state where the consent is revoked by an entity other than the data subject and which prevents it from being further used as a valid state`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when a Data Controller stops utilising previously obtaining consent, such as when that service no longer exists`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Revoked`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0024`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0025`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0026`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}definition`),
      literal(`The state or status of 'consent' that provides information reflecting its operational status and validity for processing data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}note`),
      literal(`States are useful as information artefacts to implement them in controlling processing, and to reflect the process and flow of obtaining and maintaining consent. For example, a database table that stores consent states for specific processing and can be queried to obtain them in an efficient manner. States are also useful in investigations to determine the use and validity of consenting practices`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}definition`),
      literal(`States of consent that cannot be used as valid justifications for processing data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentExpired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentRefused`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentRequested`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}note`),
      literal(`This identifies the stages associated with consent that should not be used to process data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Status Invalid for Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}definition`),
      literal(`States of consent that can be used as valid justifications for processing data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentGiven`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}note`),
      literal(`Practically, given consent is the only valid state for processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Status Valid for Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${skos}definition`),
      literal(`State where information about consent is not available or is unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${skos}note`),
      literal(`Consent states can be unknown, for example, when information is not available, or cannot be trusted, or is known to be inaccurate`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${skos}definition`),
      literal(`The state where the consent is withdrawn or revoked specifically by the data subject and which prevents it from being further used as a valid state`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${skos}note`),
      literal(`This state can be considered a form of 'revocation' of consent, where the revocation can only be performed by the data subject. Therefore we suggest using ConsentRevoked when it is a non-data-subject entity, and ConsentWithdrawn when it is the data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent Withdrawn`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentExpired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentGiven`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentInvalidated`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentRefused`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentRequestDeferred`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentRequested`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentRevoked`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentStatusInvalidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentUnknown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentWithdrawn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_StatusConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent_Status Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UninformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consent_TypesConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Consent_Types Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0029`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}definition`),
      literal(`The consequence(s) possible or arising from specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consequence`),
      namedNode(`${skos}prefLabel`),
      literal(`Consequence`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${skos}definition`),
      literal(`The consequence(s) possible or arising as a side-effect of specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${skos}prefLabel`),
      literal(`Consequence as Side-Effect`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${skos}definition`),
      literal(`The consequence(s) possible or arising from failure of specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${skos}prefLabel`),
      literal(`Consequence of Failure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${skos}definition`),
      literal(`The consequence(s) possible or arising from success of specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${skos}prefLabel`),
      literal(`Consequence of Success`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}definition`),
      literal(`to consult or query data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Monitor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Query`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}prefLabel`),
      literal(`Consult`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Query`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consult`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}definition`),
      literal(`Consultation is a process of receiving feedback, advice, or opinion from an external agency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${skos}prefLabel`),
      literal(`Consultation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consultation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${skos}definition`),
      literal(`Consultation with an authority or authoritative entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`Consultation with Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${skos}definition`),
      literal(`Consultation with Data Protection Officer(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${skos}prefLabel`),
      literal(`Consultation with DPO`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Consultation with data subject(s) or their representative(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Consultation with Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${skos}definition`),
      literal(`Consultation with representative of data subject(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${skos}prefLabel`),
      literal(`Consultation with Data Subject Representative`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that consume goods or services for direct use`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${skos}prefLabel`),
      literal(`Consumer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Consumer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0028`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}definition`),
      literal(`Contextually relevant information not possible to represent through other core concepts`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Justification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Scope`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Context`),
      namedNode(`${skos}prefLabel`),
      literal(`Context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EndlessDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Justification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NotRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OftenFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Optional`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Required`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Scope`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SingularFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Technology`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TemporalDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasIdentifier`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasJustification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasOutcome`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasScope`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isAfter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isBefore`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContextConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Context Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${skos}definition`),
      literal(`Frequency where occurences are continous`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${skos}prefLabel`),
      literal(`Continous Frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}definition`),
      literal(`Creation, completion, fulfilment, or performance of a contract involving specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ContractPerformance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${skos}prefLabel`),
      literal(`Contract`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Contract`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${skos}definition`),
      literal(`Fulfilment or performance of a contract involving specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${skos}prefLabel`),
      literal(`Contract Performance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractPerformance`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${skos}definition`),
      literal(`Contractual terms governing data handling within or with an entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${skos}prefLabel`),
      literal(`Contractual Terms`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ContractualTerms`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0020`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0021`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${skos}definition`),
      literal(`An agreement outlining conditions, criteria, obligations, responsibilities, and specifics for carrying out processing of personal data between a Data Controller and a Data Processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Controller-Processor Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${skos}definition`),
      literal(`to produce an exact reprodution of the data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${skos}prefLabel`),
      literal(`Copy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Copy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Copy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with detection, prevention, and mitigation of mitigate money laundering`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${skos}prefLabel`),
      literal(`Counter Money Laundering`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}definition`),
      literal(`A political entity indicative of a sovereign or non-sovereign territorial state comprising of distinct geographical areas`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ThirdCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}note`),
      literal(`The definition of country is not intended for political interpretation. DPVCG welcomes alternate definitions based in existing sources with global scope, such as UN or ISO.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${skos}prefLabel`),
      literal(`Country`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Country`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${skos}definition`),
      literal(`Management of credentials and their use in authorisations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Credential Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CredentialManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with monitoring, performing, or assessing credit worthiness or solvency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${skos}prefLabel`),
      literal(`Credit Checking`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CreditChecking`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptography for authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${skos}prefLabel`),
      literal(`Cryptographic Authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${skos}definition`),
      literal(`Management of cryptographic keys, including their generation, storage, assessment, and safekeeping`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Cryptographic Key Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods to perform tasks`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HashFunctions`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TrustedComputing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${skos}prefLabel`),
      literal(`Cryptographic Methods`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that purchase goods or services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Client`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}note`),
      literal(`note: for B2B relations where customers are organisations, this concept only applies for data subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Customer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}definition`),
      literal(`Customer Care refers to purposes associated with purposes for providing assistance, resolving issues, ensuring satisfaction, etc. in relation to services provided`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Care`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Feedback`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerCare`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${skos}definition`),
      literal(`Customer Claims Management refers to purposes associated with managing claims, including repayment of monies owed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Claims Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}definition`),
      literal(`Customer Management refers to purposes associated with managing activities related with past, current, and future customers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${skos}definition`),
      literal(`Customer Order Management refers to purposes associated with managing customer orders i.e. processing of an order related to customer's purchase of good or services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Order Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${skos}definition`),
      literal(`Customer Relationship Management refers to purposes associated with managing and analysing interactions with past, current, and potential customers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Relationship Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${skos}definition`),
      literal(`Customer Solvency Monitoring refers to purposes associated with monitor solvency of customers for financial diligence`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${skos}prefLabel`),
      literal(`Customer Solvency Monitoring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${skos}definition`),
      literal(`Assessment of cybersecurity capabilities in terms of vulnerabilities and effectiveness of controls`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Cybersecurity Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${skos}definition`),
      literal(`Training methods related to cybersecurity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Cybersecurity Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${skos}definition`),
      literal(`A DPIA involves determining the potential and actual impact of processing activities on individuals or groups of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${skos}note`),
      literal(`Top class: Impact Assessment, and DPIA is sub-class`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Protection Impact Assessment (DPIA)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DPIA`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}definition`),
      literal(`Impact that acts as or causes damages`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Harm`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MaterialDamage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${skos}prefLabel`),
      literal(`Damage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Damage`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}definition`),
      literal(`A broad concept representing  'data' or 'information'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IncorrectData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SyntheticData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UnverifiedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VerifiedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Data`),
      namedNode(`${skos}prefLabel`),
      literal(`Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${skos}definition`),
      literal(`Protocols or plans for backing up of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Backup Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns22}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}definition`),
      literal(`The individual or organisation that decides (or controls) the purpose(s) of processing personal data.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}JointDataControllers`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}note`),
      literal(`The terms 'Controller' is usually the more common form of indicating a Data Controller. In ISO/IEC the term 'PII Controller' is used.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:DataController`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${skos}scopeNote`),
      literal(`An Data Controller can be a Data Source, e.g. a Controller inferring data or generating data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns23}recommendations-012020-measures-supplement-transfer_en`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${skos}definition`),
      literal(`An entity that 'exports' data where exporting is considered a form of data transfer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${skos}note`),
      literal(`The EU, in particular the EDPB, uses data exporter the context of cross-border data transfers/flows. These concepts are not bound by jurisdictional or geopolitical scopes within DPV and can thus be used for any notion of exporting`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Exporter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataExporter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns23}recommendations-012020-measures-supplement-transfer_en`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${skos}definition`),
      literal(`An entity that 'imports' data where importing is considered a form of data transfer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${skos}note`),
      literal(`The EU, in particular the EDPB, uses data importing the context of cross-border data transfers/flows. These concepts are not bound by jurisdictional or geopolitical scopes within DPV and can thus be used for any notion of importing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Importer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataImporter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}definition`),
      literal(`An agreement outlining conditions, criteria, obligations, responsibilities, and specifics for carrying out processing of personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}note`),
      literal(`For specific role-based data processing agreements, see concepts for Processors and JointDataController agreements.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Processing Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}definition`),
      literal(`Record of personal data processing, whether ex-ante or ex-post`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Processing Record`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${dcterms}created`),
      literal(`2019-06-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns24}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0011`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${skos}definition`),
      literal(`A ‘processor’ means a natural or legal person, public authority, agency or other body which processes personal data on behalf of the controller.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProcessor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${skos}definition`),
      literal(`An authority tasked with overseeing legal compliance regarding privacy and data protection laws.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Protection Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${dcterms}modified`),
      literal(`2021-12-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns25}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${skos}definition`),
      literal(`An entity within or authorised by an organisation to monitor internal compliance, inform and advise on data protection obligations and act as a contact point for data subjects and the supervisory authority.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Protection Officer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${skos}definition`),
      literal(`Training intended to increase knowledge regarding data protection`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Protection Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Data is published by the data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${skos}note`),
      literal(`This refers to where that data was made publicly available by the data subject. An example of this would be a social media profile that the data subject has made publicly accessible.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Data published by Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${dcterms}created`),
      literal(`2020-10-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${skos}definition`),
      literal(`Removal of sensitive information from a data or document`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Redaction`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataRedaction`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}definition`),
      literal(`Cleaning or any removal or re-organisation of elements in data based on selective criteria`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataRedaction`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Sanitisation Technique`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0012`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0020`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}definition`),
      literal(`The source or origin of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PublicDataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}note`),
      literal(`Source' is the direct point of data collection; 'origin' would indicate the original/others points of where the data originates from.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Source`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSource`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-25`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${skos}definition`),
      literal(`A 'sub-processor' is a processor engaged by another processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${skos}note`),
      literal(`sub-processor' is a commonly used term similar to 'sub-contractor' and does not have a specific legal definition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Sub-Processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns26}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}NaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}definition`),
      literal(`The individual (or category of individuals) whose personal data is being processed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Adult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Applicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Child`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Citizen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Consumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Customer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Employee`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Immigrant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Member`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonCitizen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Participant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Patient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Student`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Subscriber`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Tourist`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}User`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Visitor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}note`),
      literal(`The term 'data subject' is specific to the GDPR, but is functionally equivalent to the term 'individual' and the ISO/IEC term 'PII Principle'.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:DataSubject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${skos}scopeNote`),
      literal(`A Data Subject as a Data Source, e.g. when data is collected via a form or observed from their activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}NaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${skos}definition`),
      literal(`The rights applicable or provided to a Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${skos}note`),
      literal(`Based on use of definitions, the notion of 'Data Subject Right' can be equivalent to 'Individual Right' or 'Right of a Person'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Subject Right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${dcterms}creator`),
      literal(`Rana Saniei`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}definition`),
      literal(`Scale of Data Subject(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Subject Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${skos}definition`),
      literal(`Impact Assessment for conducting data transfers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Transfer Impact Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krogg`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${skos}definition`),
      literal(`Specific or special categories and instances of legal basis intended for justifying data transfers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Transfer Legal Basis`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Rana Saniei`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}definition`),
      literal(`Volume or Scale of Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DataVolume`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${skos}definition`),
      literal(`Location that is spread across multiple separate areas with no distinction between their importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${skos}prefLabel`),
      literal(`Decentralised Locations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves decision making`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${skos}prefLabel`),
      literal(`Decision Making`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DecisionMaking`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns27}NIST.IR.8053.pdf`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}definition`),
      literal(`Removal of identity or information to reduce identifiability`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Anonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${skos}prefLabel`),
      literal(`De-Identification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Deidentification`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with delivering goods and services requested or asked by consumer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${skos}prefLabel`),
      literal(`Delivery of Goods`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Delivery`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0014`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}definition`),
      literal(`to create new derivative data from the original data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Infer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}note`),
      literal(`Derive indicates data is present or obtainable from existing data. For data that is created without such existence, see Infer.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}prefLabel`),
      literal(`Derive`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Derive`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Derive`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling; Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${dcterms}modified`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${dcterms}source`),
      namedNode(ns28),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that is obtained or derived from other data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}note`),
      literal(`Derived Data is data that is obtained through processing of existing data, e.g. deriving first name from full name. To indicate data that is derived but which was not present or evident within the source data, InferredPersonalData should be used.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Derived Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${skos}related`),
      namedNode(`${ns29}Derived`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${skos}definition`),
      literal(`A set of rules or guidelines outlining criterias for design`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${skos}prefLabel`),
      literal(`Design Standard`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DesignStandard`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${skos}definition`),
      literal(`to process data in a way it no longer exists or cannot be repaired`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${skos}prefLabel`),
      literal(`Destruct`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Destruct`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`Pseudonymisation achieved through a deterministic function`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Deterministic Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${skos}definition`),
      literal(`Impact that acts as or causes detriments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${skos}prefLabel`),
      literal(`Detriment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Detriment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${skos}definition`),
      literal(`Utilisation of differential privacy where information is shared as patterns or groups to withold individual elements`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${skos}prefLabel`),
      literal(`Differential Privacy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${skos}definition`),
      literal(`Management of access, use, and other operations associated with digital content`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Digital Rights Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${skos}definition`),
      literal(`Expression and authentication of identity through digital information containing cryptographic signatures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${skos}prefLabel`),
      literal(`Digital Signatures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting direct marketing i.e. marketing communicated directly to the individual`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${skos}prefLabel`),
      literal(`Direct Marketing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DirectMarketing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to management of disasters and recovery`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Disaster Recovery Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}definition`),
      literal(`to make data known`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Disseminate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MakeAvailable`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Share`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Transmit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${skos}prefLabel`),
      literal(`Disclose`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disclose`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${skos}definition`),
      literal(`to disclose data by means of transmission`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${skos}prefLabel`),
      literal(`Disclose by Transmission`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with activities that manage disputes by natural persons, private bodies, or public authorities relevant to organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Dispute Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DisputeManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${skos}definition`),
      literal(`to spread data throughout`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${skos}prefLabel`),
      literal(`Disseminate`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Disseminate`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implementations provided using or over a distributed system`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Distributed System Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`Use of randomised pseudonymisation where the same elements are assigned different values in the same document or database`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Document Randomised Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security measures enacted over documents to protect against tampering or restrict access`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Document Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0011`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}definition`),
      literal(`The duration or temporal limitation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EndlessDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TemporalDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${skos}prefLabel`),
      literal(`Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Duration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${skos}definition`),
      literal(`A political union of two or more countries based on economic or trade agreements`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${skos}prefLabel`),
      literal(`Economic Union`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EconomicUnion`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${skos}definition`),
      literal(`Training methods that are intended to provide education on topic(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Educational Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EducationalTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures intended to determine effectiveness of other measures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Effectiveness Determination Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are considered elderly (i.e. based on age)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Elderly Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are employees`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${skos}prefLabel`),
      literal(`Employee`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Employee`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0016`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}definition`),
      literal(`Technical measures consisting of encryption`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${skos}prefLabel`),
      literal(`Encryption`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Encryption`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${skos}definition`),
      literal(`Encryption of data when being stored (persistent encryption)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${skos}prefLabel`),
      literal(`Encryption at Rest`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${skos}definition`),
      literal(`Encryption of data in transit e.g. when being transferred from one location to another, including sharing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${skos}prefLabel`),
      literal(`Encryption in Transfer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${skos}definition`),
      literal(`Encryption of data when it is being used`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${skos}prefLabel`),
      literal(`Encryption in Use`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${skos}definition`),
      literal(`Encrypted communications where data is encrypted by the sender and decrypted by the intended receiver to prevent access to any third party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${skos}prefLabel`),
      literal(`End-to-End Encryption (E2EE)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that is (known or intended to be) open ended or without an end`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Endless Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EndlessDuration`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting or enforcing access control as a form of security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}note`),
      literal(`Was previously "Access Control". Prefixed to distinguish from Technical Measure.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}prefLabel`),
      literal(`Enforce Access Control`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Login`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with ensuring and enforcing security for data, personnel, or other related matters`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IdentityVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}note`),
      literal(`Was previous "Security". Prefixed to distinguish from TechOrg measures.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Enforce Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${skos}definition`),
      literal(`Processing necessary to enter into contract`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${skos}prefLabel`),
      literal(`Enter Into Contract`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasAddress`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasContact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasName`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EntitiesConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Entities Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProtectionAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NationalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_AuthorityConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Entities_Authority Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Adult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Applicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Child`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Citizen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Client`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Consumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Customer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Employee`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Immigrant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}JobApplicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Member`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonCitizen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Participant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Patient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Student`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Subscriber`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Tourist`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}User`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Visitor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_DatasubjectConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Entities_Datasubject Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataExporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataImporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}JointDataControllers`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataExporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataImporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_LegalroleConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Entities_Legalrole Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entities_OrganisationConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Entities_Organisation Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0027`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}definition`),
      literal(`A human or non-human 'thing' that constitutes as an entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Entity`),
      namedNode(`${skos}prefLabel`),
      literal(`Entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${skos}definition`),
      literal(`to delete data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${skos}prefLabel`),
      literal(`Erase`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Erase`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with carrying out data processing to establish an agreement, such as for entering into a contract`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Establish Contractual Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves evaluation of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${skos}prefLabel`),
      literal(`Evaluation of Individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves evaluation and scoring of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${skos}prefLabel`),
      literal(`Evaluation and Scoring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${skos}definition`),
      literal(`Consent that is expressed through an explicit action solely conveying a consenting decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${skos}note`),
      literal(`Explicitly expressed consent is a more specific form of Expressed consent where the action taken must 'explicitly' relate to only the consent decision. Expressed consent where the consenting is part of other matters therefore cannot satisfy the requirements of explicitly expressed consent. An example of explicit action expressing the consenting decision is a button on a web form where the form only relates to consent, or it is accompanied with suitable text that reiterates what the consenting decision is about`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${skos}prefLabel`),
      literal(`Explicitly Expressed Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}definition`),
      literal(`Consent that is expressed through an action intended to convey a consenting decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ExplicitlyExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}note`),
      literal(`Expressed consent requires the individual take a specific and unambigious action that directly indicates their consent. This action may be a part of other processes such as setting preferences, or agreeing to a contract, or other matters not relating to consent. An example of expressed consent is interacting with a checkbox within a dashboard or clicking a button on a web form`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${skos}prefLabel`),
      literal(`Expressed Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${skos}definition`),
      literal(`Location that is federated across multiple separate areas with designation of a primary or central location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${skos}prefLabel`),
      literal(`Federated Locations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FederatedLocations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implemented over a file system`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`File System Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${skos}definition`),
      literal(`to filter or keep data for some criteria`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${skos}prefLabel`),
      literal(`Filter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Filter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is fixed i.e. known to occur at a specific place`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Fixed Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${skos}definition`),
      literal(`Location that is fixed with multiple places e.g. multiple cities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${skos}prefLabel`),
      literal(`Fixed Multiple Locations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that takes place a fixed number of times e.g. 3 times`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Fixed Occurences Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedOccurencesDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is fixed at a specific place e.g. a city`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Fixed Singular Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${skos}definition`),
      literal(`An organisation that aims to achieve profit as its primary goal`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`For-Profit Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with fraud detection, prevention, and mitigation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}prefLabel`),
      literal(`Fraud Prevention and Detection`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Government`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-16`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}definition`),
      literal(`The frequency or information about periods and repetitions in terms of recurrence.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ContinousFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OftenFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SingularFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${skos}prefLabel`),
      literal(`Frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Frequency`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with carrying out data processing to fulfill a contractual obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${skos}prefLabel`),
      literal(`Fulfilment of Contractual Obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with carrying out data processing to fulfill an obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegalCompliance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${skos}prefLabel`),
      literal(`Fulfilment of Obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that is fully automated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Fully Automated Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`Use of randomised pseudonymisation where the same elements are assigned different values each time they occur`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Fully Randomised Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${skos}definition`),
      literal(`to generate or create data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${skos}prefLabel`),
      literal(`Generate`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Generate`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that is generated or brought into existence without relation to existing data i.e. it is not derived or inferred from other data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}note`),
      literal(`Generated Data is used to indicate data that is produced and is not derived or inferred from other data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Generated Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}definition`),
      literal(`Indicate of scale in terms of geographic coverage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GlobalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LocalityScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NationalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RegionalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${skos}prefLabel`),
      literal(`Geographic Coverage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning the entire globe`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Global Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GlobalScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to governance (e.g. organisation, unit, team, process, system)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Governance Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${skos}definition`),
      literal(`An organisation managed or part of government`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Governmental Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-03`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Guardian(s) of data subjects such as children`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Guardian(s) of Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuardianOfDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}definition`),
      literal(`Guidelines or Principles regarding processing and operational measures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DesignStandard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${skos}prefLabel`),
      literal(`GuidelinesPrinciple`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${skos}definition`),
      literal(`Security protocols implemented at or within hardware`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Hardware Security Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0029`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${skos}definition`),
      literal(`Impact that acts as or causes harms`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${skos}prefLabel`),
      literal(`Harm`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Harm`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${skos}definition`),
      literal(`Use of hash functions to map information or to retrieve a prior categorisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${skos}prefLabel`),
      literal(`Hash Functions`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashFunctions`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${skos}definition`),
      literal(`Use of HMAC where message authentication code (MAC) utilise a cryptographic hash function and a secret cryptographic key`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${skos}prefLabel`),
      literal(`Hash-based Message Authentication Code (HMAC)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${skos}definition`),
      literal(`Use of Homomorphic encryption that permits computations on encrypted data without decrypting it`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${skos}prefLabel`),
      literal(`Homomorphic Encryption`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered huge or more than large within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Huge Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered huge or more than large within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Huge Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}definition`),
      literal(`The involvement of humans in specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}note`),
      literal(`Human Involvement here broadly refers to any involvement by a human in the context of carrying out processing. This may include verification of outcomes, providing input data for making decisions, or overseeing activities.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${skos}prefLabel`),
      literal(`Human Involvement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${skos}definition`),
      literal(`Human involvement for the purposes of providing inputs`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${skos}prefLabel`),
      literal(`Human Involvement for Input`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${skos}definition`),
      literal(`Human involvement for the purposes of having oversight over a system, its operations, inputs, or outputs`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${skos}prefLabel`),
      literal(`Human Involvement for Oversight`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${skos}definition`),
      literal(`Human involvement for the purposes of verification of a system, its operations, inputs, or outputs`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${skos}prefLabel`),
      literal(`Human Involvement for Verification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing humans and 'human resources' within the organisation for effective and efficient operations.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}note`),
      literal(`HR is a broad concept. Its management includes, amongst others - recruiting employees and intermediaries e.g. brokers, independent representatives; payroll administration, remunerations, commissions, and wages; and application of social legislation.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Human Resource Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${skos}definition`),
      literal(`Management of identity and identity-based processes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${skos}prefLabel`),
      literal(`Identity Management Method`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with verifying or authorising identity as a form of security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${skos}prefLabel`),
      literal(`Identity Verification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IdentityVerification`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are immigrants (for a jurisdiction)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${skos}prefLabel`),
      literal(`Immigrant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Immigrant`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0029`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}definition`),
      literal(`The impact(s) possible or arising as a consequence from specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Benefit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Detriment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}note`),
      literal(`Impact is a stronger notion of consequence in terms of influence, change, or effect on something e.g. for impact assessments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${skos}prefLabel`),
      literal(`Impact`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Impact`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}definition`),
      literal(`Calculating or determining the likelihood of impact of an existing or proposed process, which can involve risks or detriments.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DPIA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PIA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Impact Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${skos}definition`),
      literal(`Consent that is implied indirectly through an action not associated solely with conveying a consenting decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${skos}note`),
      literal(`Implied consent is expected to also be Informed Consent. An example is a CCTV notice outside a monitored area that informs the individuals that by walking in they would be consenting to the use of camera for surveillance.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${skos}prefLabel`),
      literal(`Implied Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}InformedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}definition`),
      literal(`An indication of 'importance' within a context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}note`),
      literal(`Importance can be used to express importance, desirability, relevance, or significance as a context.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${skos}prefLabel`),
      literal(`Importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Importance`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with improving existing products and services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${skos}prefLabel`),
      literal(`Improve Existing Products and Services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with improving customer-relationship management (CRM) processes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${skos}prefLabel`),
      literal(`Improve Internal CRM Processes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to management of incidents`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Incident Management Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to management of incident reporting`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${skos}prefLabel`),
      literal(`Incident Reporting Communication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${skos}definition`),
      literal(`Data that is known to be incorrect or inconsistent with some quality requirements`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${skos}prefLabel`),
      literal(`Incorrect Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncorrectData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with improving robustness and resilience of services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${skos}prefLabel`),
      literal(`Increase Service Robustness`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that is indeterminate or cannot be determined`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${skos}note`),
      literal(`Indeterminate means (exact or otherwise) information about the duration cannot be determined, which is distinct from 'EndlessDuration' where it is known (or decided) that the duration is open-ended or without an end.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Indeterminate Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndeterminateDuration`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${skos}definition`),
      literal(`A consortium established and comprising on industry organisations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${skos}prefLabel`),
      literal(`Industry Consortium`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-14`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0014`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Derive`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${skos}definition`),
      literal(`to infer data from existing data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${skos}note`),
      literal(`Infer indicates data that is derived without it being present or obtainable from existing data. For data that is presented, and is 'extracted' or 'obtained' from existing data, see Derive.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${skos}prefLabel`),
      literal(`Infer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Infer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Derive`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that is obtained through inference from other data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}note`),
      literal(`Inferred Data is derived data generated from existing data, but which did not originally exist within it, e.g. inferring demographics from browsing history.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Inferred Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${skos}definition`),
      literal(`Use of measures to control information flows`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${skos}prefLabel`),
      literal(`Information Flow Control`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${skos}definition`),
      literal(`Policy regarding security of information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${skos}prefLabel`),
      literal(`Information Security Policy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}definition`),
      literal(`Consent that is informed i.e. with the requirement to provide sufficient information to make a consenting decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ExpressedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ImpliedConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}note`),
      literal(`The specifics for what information should be provided or made available will depend on the context, use-case, or relevant legal requirements`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${skos}prefLabel`),
      literal(`Informed Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InformedConsent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves use of innovative and new technologies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${skos}prefLabel`),
      literal(`Innovative Use of New Technologies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with optimisation of internal resource availability and usage for organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Internal Resource Optimisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns30}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${skos}definition`),
      literal(`An organisation and its subordinate bodies governed by public international law, or any other body which is set up by, or on the basis of, an agreement between two or more countries`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`International Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${skos}definition`),
      literal(`Use of measures to detect intrusions and other unauthorised attempts to gain access to a system`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${skos}prefLabel`),
      literal(`Intrusion Detection System`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Applicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that apply for jobs or employments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${skos}prefLabel`),
      literal(`Job Applicant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JobApplicant`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Applicant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${skos}definition`),
      literal(`A group of Data Controllers that jointly determine the purposes and means of processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${skos}note`),
      literal(`To indicate the membership, hasDataController may be used`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${skos}prefLabel`),
      literal(`Joint Data Controllers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllers`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${skos}definition`),
      literal(`An agreement outlining conditions, criteria, obligations, responsibilities, and specifics for carrying out processing of personal data between Controllers within a Joint Controllers relationship`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Joint Data Controllers Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}City`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CloudLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Country`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EconomicUnion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FederatedLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FixedMultipleLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FixedSingularLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Law`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivateLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PublicLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RandomLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Region`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RemoteLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ThirdCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VariableLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WithinDevice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}JurisdictionConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Jurisdiction Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${skos}definition`),
      literal(`A form of documentation providing reaosns, explanations, or justifications`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${skos}prefLabel`),
      literal(`Justification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Justification`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered large within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Large Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered large within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Large Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that takes place at large scales (as specified by some criteria)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${skos}note`),
      literal(`The exact definition of what constitutes "large scale" depends on use of jurisdictional, domain-specific, or other forms of externally defined criterias. Where possible, this should be reflected by extending this term with the appropriate context.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Large Scale Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${skos}definition`),
      literal(`A law is a set of rules created by government or authorities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Law`),
      namedNode(`${skos}prefLabel`),
      literal(`Law`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${skos}definition`),
      literal(`State of being lawful or legally compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${skos}prefLabel`),
      literal(`Lawful`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawful`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}definition`),
      literal(`Status associated with expressing lawfullness or legal compliance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Lawful`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Unlawful`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${skos}prefLabel`),
      literal(`Lawfulness`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Lawfulness`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${skos}definition`),
      literal(`State of the lawfulness not being known`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${skos}prefLabel`),
      literal(`Lawfulness Unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}definition`),
      literal(`A legally binding agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ContractualTerms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NDA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0022`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0023`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}definition`),
      literal(`The Legal basis used to justify processing of personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegalObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PublicInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VitalInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}note`),
      literal(`Legal basis (plural: legal bases) are defined by legislations and regulations, whose applicability is usually restricted to specific jurisdictions.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalBasis`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal Basis`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with carrying out data processing to fulfill a legal or statutory obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${skos}note`),
      literal(`This purpose only refers to processing that is additionally required in order to fulfill the obligations and requirements associated with a law. For example, the use of consent would have its own separate purposes, with this purpose addressing a legal requirement for maintaining consent record (along with RecordManagement). This purpose will typically be used with Legal Obligation as the legal basis.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal Compliance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalCompliance`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}definition`),
      literal(`A human or non-human 'thing' that constitutes as an entity and which is recognised and defined in law`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataExporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal Entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalEntity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${skos}definition`),
      literal(`Legal Obligation to conduct the specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal Obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegalObligation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Contract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ContractPerformance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataTransferLegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EnterIntoContract`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PublicInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VitalInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Legal_BasisConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Legal_Basis Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${dcterms}created`),
      literal(`2021-05-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}definition`),
      literal(`Legitimate Interests of a Party as justification for specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${skos}prefLabel`),
      literal(`Legitimate Interest`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${skos}definition`),
      literal(`Indicates an assessment regarding the use of legitimate interest as a lawful basis by the data controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Legitimate Interest Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${dcterms}created`),
      literal(`2021-05-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${skos}definition`),
      literal(`Legitimate Interests of a Data Controller in conducting specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${skos}prefLabel`),
      literal(`Legitimate Interest of Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Legitimate Interests of the Data Subject in conducting specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Legitimate Interest of Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${dcterms}created`),
      literal(`2021-05-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${skos}definition`),
      literal(`Legitimate Interests of a Third Party in conducting specified processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${skos}prefLabel`),
      literal(`Legitimate Interest of Third Party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LegitimateInterestOfThirdParty`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegitimateInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${skos}definition`),
      literal(`The likelihood or probability or chance of something taking place or occuring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${skos}note`),
      literal(`Likelihood can be expressed in a subjective manner, such as 'Unlikely', or in a quantitative manner such as "Twice in a Day" (frequency per period). The suggestion is to use quantitative values, or to associate them with subjective terms used so as to enable accurate interpretations and interoperability. See the concepts related to Frequency and Duration for possible uses as a combination to express Likelihood.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Likelihood`),
      namedNode(`${skos}prefLabel`),
      literal(`Likelihood`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning a specific environment within the locality`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${skos}note`),
      literal(`For example, geographic scale of an event take place in a specific building or room`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Local Environment Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}definition`),
      literal(`Location is local`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivateLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PublicLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WithinDevice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Local Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning a specific locality`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${skos}note`),
      literal(`For example, geographic scale of a city or an area within a city`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Locality Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocalityScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0011`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}definition`),
      literal(`A location is a position, site, or area where something is located`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}City`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Country`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EconomicUnion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Region`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}note`),
      literal(`Location may be geographic, physical, or virtual.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Location`),
      namedNode(`${skos}prefLabel`),
      literal(`Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}definition`),
      literal(`The fixture of location refers to whether the location is fixed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DecentralisedLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FederatedLocations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FixedLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RandomLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VariableLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationFixture`),
      namedNode(`${skos}prefLabel`),
      literal(`Location Fixture`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}definition`),
      literal(`Locality refers to whether the specified location is local within some context, e.g. for the user`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RemoteLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${skos}prefLabel`),
      literal(`Location Locality`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LocationLocality`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${skos}definition`),
      literal(`Policy for logging of information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${skos}prefLabel`),
      literal(`Logging Policies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with maintaining a Credit Checking Database`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${skos}prefLabel`),
      literal(`Maintain Credit Checking Database`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with maintaining a Credit Rating Database`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${skos}prefLabel`),
      literal(`Maintain Credit Rating Database`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with maintaining a database related to identifying and identified fraud risks and fraud incidents`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${skos}prefLabel`),
      literal(`MaintainFraudDatabase`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${skos}definition`),
      literal(`to transform or publish data to be used`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${skos}prefLabel`),
      literal(`Make Available`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MakeAvailable`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting marketing in relation to organisation or products or services e.g. promoting, selling, and distributing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Advertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DirectMarketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PublicRelations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}note`),
      literal(`Was commercial interest, changed to consider Marketing a separate Purpose category by itself`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${skos}prefLabel`),
      literal(`Marketing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Marketing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns31}611236`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${skos}definition`),
      literal(`to combine, compare, or match data from different sources`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${skos}prefLabel`),
      literal(`Match`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Match`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${skos}definition`),
      literal(`Impact that acts as or causes material damages`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${skos}prefLabel`),
      literal(`Material Damage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MaterialDamage`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered medium i.e. neither large nor small within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Medium Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered medium i.e. neither large nor small within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Medium Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that takes place at medium scales (as specified by some criteria)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Medium Scale Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are members of a group, organisation, or other collectives`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${skos}prefLabel`),
      literal(`Member`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Member`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with maintaining a registry of shareholders, members, or partners for governance, administration, and management functions`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Members and Partners Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are considered mentally vulnerable`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Mentally Vulnerable Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods to authenticate messages`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${skos}prefLabel`),
      literal(`Message Authentication Codes (MAC)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implemented over a mobile platform`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Mobile Platform Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Alter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${skos}definition`),
      literal(`to modify or change data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${skos}prefLabel`),
      literal(`Modify`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Modify`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Alter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${skos}definition`),
      literal(`to monitor data for some criteria`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${skos}prefLabel`),
      literal(`Monitor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Monitor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${skos}definition`),
      literal(`Policy for monitoring (e.g. progress, performance)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${skos}prefLabel`),
      literal(`Monitoring Policies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`A simple pseudonymisation method where identifiers are substituted by a number chosen by a monotonic counter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Monotonic Counter Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${skos}definition`),
      literal(`to move data from one location to another including deleting the original copy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${skos}prefLabel`),
      literal(`Move`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Move`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Move`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${skos}definition`),
      literal(`An authentication system that uses two or more methods to authenticate`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${skos}prefLabel`),
      literal(`Multi-Factor Authentication (MFA)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning multiple nations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Multi National Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${skos}definition`),
      literal(`Non-disclosure Agreements e.g. preserving confidentiality of information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Disclosure Agreement (NDA)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NDA`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${skos}definition`),
      literal(`An authority tasked with overseeing legal compliance for a nation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`National Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalAuthority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning a nation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${skos}prefLabel`),
      literal(`National Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NationalScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${skos}definition`),
      literal(`A human`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${skos}prefLabel`),
      literal(`Natural Person`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NaturalPerson`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage nearly spanning the entire globe`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Nearly Global Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-12`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0028`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}definition`),
      literal(`An indication of 'necessity' within a context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NotRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Optional`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Required`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}note`),
      literal(`Necessity can be used to express need, essentiality, requirement, or compulsion.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${skos}prefLabel`),
      literal(`Necessity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Necessity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${skos}definition`),
      literal(`Use of network routing using proxy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${skos}prefLabel`),
      literal(`Network Proxy Routing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or over networks protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Network Security Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are not citizens (for a jurisdiction)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Citizen`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCitizen`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting research in a non-commercial setting e.g. for a non-profit-organisation (NGO)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Commercial Research`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${dcterms}modified`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${skos}definition`),
      literal(`State of non-compliance where objectives have not been met, but have not been violated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${skos}note`),
      literal(`Changed from not compliant for consistency in commonly used terms`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${skos}prefLabel`),
      literal(`Non Compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonCompliant`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${skos}definition`),
      literal(`State of being non-conformant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${skos}prefLabel`),
      literal(`NonConformant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonConformant`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${skos}definition`),
      literal(`An organisation not part of or independent from the government`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Governmental Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${skos}definition`),
      literal(`Impact that acts as or causes non-material damages`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Material Damage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Data that is not Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AnonymisedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}note`),
      literal(`The term NonPersonalData is provided to distinguish between PersonalData and other data, e.g. for indicating which data is regulated by privacy laws. To specify personal data that has been anonymised, the concept AnonymisedData should be used.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${skos}definition`),
      literal(`An organisation that does not aim to achieve profit as its primary goal`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Profit Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${skos}definition`),
      literal(`A source of data that is not publicly accessible or available`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${skos}prefLabel`),
      literal(`Non-Public Data Source`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${skos}definition`),
      literal(`Indication of neither being required nor optional i.e. not relevant or needed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${skos}prefLabel`),
      literal(`Not Required`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}NotRequired`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0025`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}definition`),
      literal(`A notice is an artefact for providing information, choices, or controls`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${skos}prefLabel`),
      literal(`Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Notice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${skos}definition`),
      literal(`A rule describing an obligation for performing an activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${skos}prefLabel`),
      literal(`Obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obligation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${skos}definition`),
      literal(`to obtain data through observation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${skos}prefLabel`),
      literal(`Observe`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Observe`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that has been collected through observation of the Data Subject(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Observed Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}definition`),
      literal(`to solicit or gather data from someone`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Acquire`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Collect`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Derive`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Generate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Observe`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Record`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${skos}prefLabel`),
      literal(`Obtain`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Obtain`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${dcterms}created`),
      literal(`2021-05-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${skos}definition`),
      literal(`Processing necessary or authorised through the official authority granted to or vested in the Data Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${skos}prefLabel`),
      literal(`Official Authority of Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OfficialAuthorityOfController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${skos}definition`),
      literal(`Frequency where occurences are often or frequent, but not continous`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${skos}prefLabel`),
      literal(`Often Frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OftenFrequency`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or through operating systems`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Operating System Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with optimisation of activities and services for consumer or user`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}note`),
      literal(`The term optmisation here refers to the efficiency of the service in terms of technical provision (or similar means) with benefits for everybody. Personalisation implies making changes that benefit the current user or persona.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}prefLabel`),
      literal(`Optimisation for Consumer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Custom`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with optimisation of activities and services for provider or controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${skos}prefLabel`),
      literal(`Optimisation for Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimisationForController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with optimisation of interfaces presented to the user`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${skos}prefLabel`),
      literal(`Optimise User Interface`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-14`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${skos}definition`),
      literal(`Indication of 'optional' or 'voluntary'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${skos}prefLabel`),
      literal(`Optional`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Optional`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}definition`),
      literal(`A general term reflecting a company or a business or a group acting as a unit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AcademicScientificOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ForProfitOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IndustryConsortium`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InternationalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonGovernmentalOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonProfitOrganisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing compliance for organisation in relation to internal policies`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${skos}note`),
      literal(`Note that this concept relates to internal organisational compliance. The concept LegalCompliance should be used for external legal or regulatory compliance.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisation Compliance Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting activities and functions for governance of an organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DisputeManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisation Governance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing risk for organisation's activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisation Risk Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0017`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}definition`),
      literal(`Organisational measures required/followed when processing data of the declared category`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Safeguard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisational Measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-23`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${skos}definition`),
      literal(`Entity within an organisation that does not constitute as a separate legal entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisational Unit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}OrganisationalUnit`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AssetManagementProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuthorisationProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Certification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CodeOfConduct`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ComplianceMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsentRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Consultation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsultationWithAuthority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsultationWithDPO`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsultationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsultationWithDataSubjectRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ContractualTerms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ControllerProcessorAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CredentialManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DPIA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataTransferImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DesignStandard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DisasterRecoveryProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EducationalTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EffectivenessDeterminationProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GovernanceProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IdentityManagementMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IncidentManagementProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IncidentReportingCommunication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}JointDataControllersAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegitimateInterestAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LoggingPolicies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MonitoringPolicies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NDA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PIA`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Safeguard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Seal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organisational_MeasuresConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Organisational_Measures Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${skos}definition`),
      literal(`to organize data for arranging or classifying`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Structure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${skos}prefLabel`),
      literal(`Organise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Organise`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${skos}definition`),
      literal(`Carrying out an impact assessment regarding privacy risks`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${skos}prefLabel`),
      literal(`Privacy Impact Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PIA`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-03`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Parent(s) of data subjects such as children`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Parent(s) of Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ParentOfDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that is partially automated or semi-automated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${skos}note`),
      literal(`For example, a series of distinct processing operations that are automated individually or have some human involvement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Partially Automated Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${skos}definition`),
      literal(`State of partially being compliant i.e. only some objectives have been met, and others have not been in violation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${skos}prefLabel`),
      literal(`Partially Compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that participate in some context such as volunteers in a function`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${skos}prefLabel`),
      literal(`Participant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Participant`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${skos}definition`),
      literal(`The right(s) applicable, provided, or expected that are always (passively) applicable`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${skos}note`),
      literal(`Passive rights do not require the entity to request or exercise them. They are considered to be always applicable. For example, the Right to Privacy (in EU) does not require an exercise for it to be fulfilled.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${skos}prefLabel`),
      literal(`Passive Right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PassiveRight`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${skos}definition`),
      literal(`Use of passwords to perform authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${skos}prefLabel`),
      literal(`Password Authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that receive medican attention, treatment, care, advice, or other health related services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${skos}prefLabel`),
      literal(`Patient`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Patient`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with processing and managing payment in relation to service, including invoicing and records`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Payment Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PaymentManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${skos}definition`),
      literal(`Use of penetration testing to identity weaknessess and vulnerabilities through simulations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${skos}prefLabel`),
      literal(`Penetration Testing Methods`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${skos}definition`),
      literal(`A rule describing a permission to perform an activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${skos}prefLabel`),
      literal(`Permission`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Permission`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${dcterms}modified`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns26}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}definition`),
      literal(`Data directly or indirectly associated or related to an individual.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}note`),
      literal(`This definition of personal data encompasses the concepts used in GDPR Art.4-1 for 'personal data' and ISO/IEC 2700 for 'personally identifiable information (PII)'.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${skos}related`),
      namedNode(`${ns32}AnyData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0007`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0008`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0014`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0018`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0020`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0022`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0028`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${skos}definition`),
      literal(`A high-level Class to describe 'data handling'. This can consist of personal data being processed for a purpose, involving entities, using technical and organisational measures, applicable risks, rights, and legal basis.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(`${skos}prefLabel`),
      literal(`Personal Data Handling`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AnonymisedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CollectedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DerivedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GeneratedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IncorrectData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InferredPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ObservedPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SyntheticData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UnverifiedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VerifiedData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personal_DataConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Personal_Data Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing customisation based on attributes and/or needs of person(s) or context(s).`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}note`),
      literal(`This term is a blanket purpose category for indicating personalisation of some other purpose, e.g. by creating a subclass of the other concept and Personalisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Personalisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Personalisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Advertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing personalised advertising`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${skos}prefLabel`),
      literal(`Personalised Advertising`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Advertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing personalised benefits for a service`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${skos}prefLabel`),
      literal(`Personalised Benefits`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with management and execution of hiring processes of personnel`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${skos}prefLabel`),
      literal(`Personnel Hiring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with management of personnel associated with the organisation e.g. evaluation and management of employees and intermediaries`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Personnel Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with management and execution of payment of personnel`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${skos}prefLabel`),
      literal(`Personnel Payment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${skos}definition`),
      literal(`Access control applied for physical access e.g. premises or equipement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${skos}prefLabel`),
      literal(`Physical Access Control Method`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0017`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}definition`),
      literal(`A guidance document outlining any of: procedures, plans, principles, decisions, intent, or protocols.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InformationSecurityPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${skos}prefLabel`),
      literal(`Policy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Policy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${skos}definition`),
      literal(`Use of algorithms that are intended to be secure against cryptanalytic attack by a quantum computer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${skos}prefLabel`),
      literal(`Post-Quantum Cryptography`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-10`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${skos}definition`),
      literal(`Indication of 'primary' or 'main' or 'core' importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${skos}prefLabel`),
      literal(`Primary Importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrimaryImportance`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${skos}definition`),
      literal(`Practices regarding selecting appropriate data protection and privacy measures as the 'default' in an activity or service`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${skos}prefLabel`),
      literal(`Privacy by Default`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDefault`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}GuidelinesPrinciple`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${skos}definition`),
      literal(`Practices regarding incorporating data protection and privacy in the design of information and services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${skos}prefLabel`),
      literal(`Privacy by Design`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyByDesign`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0018`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0025`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${skos}definition`),
      literal(`Represents a notice or document outlining information regarding privacy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`Privacy Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyNotice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${skos}definition`),
      literal(`Use of protocols designed with the intention of provided additional guarentees regarding privacy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${skos}prefLabel`),
      literal(`Privacy Preserving Protocol`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods to retrieve a record from a system without revealing which record is retrieved`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${skos}prefLabel`),
      literal(`Private Information Retrieval`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is not or cannot be accessed by the public and is controlled as a private space`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Private Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PrivateLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0005`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0011`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0014`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}definition`),
      literal(`The processing performed on personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Copy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Organise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Store`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Transfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing`),
      namedNode(`${skos}related`),
      namedNode(`${ns32}AnyProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Access`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Acquire`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Adapt`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Align`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Alter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Analyse`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Anonymise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Assess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Collect`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Combine`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Copy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Derive`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Destruct`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DiscloseByTransmission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Disseminate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Erase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Filter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Generate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Infer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MakeAvailable`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Match`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Modify`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Monitor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Move`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Observe`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Organise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Profiling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Pseudonymise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Query`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Record`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Remove`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Restrict`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Retrieve`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Screen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Share`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Store`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Structure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Transfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Transmit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}definition`),
      literal(`Context or conditions within which processing takes place`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing Context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingContext`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}definition`),
      literal(`Scale of Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}note`),
      literal(`The exact definition of what constitutes "scale" depends on use of jurisdictional, domain-specific, or other forms of externally defined criterias. Where possible, this should be reflected by extending the scales provided with the appropriate context.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProcessingScale`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AutomatedDecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AutomatedProcessingWithHumanInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AutomatedProcessingWithHumanOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AutomatedProcessingWithHumanReview`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CompletelyManualProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataPublishedByDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DecisionMaking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EvaluationOfIndividuals`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FullyAutomatedProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HumanInvolvementForInput`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HumanInvolvementForOversight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HumanInvolvementForVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InnovativeUseOfNewTechnologies`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonPublicDataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PartiallyAutomatedProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PublicDataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StorageDeletion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StorageDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StorageLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}StorageRestoration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ContextConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing_Context Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}GlobalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HugeDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HugeScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LargeDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LargeScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LargeScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LocalEnvironmentScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LocalityScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MediumDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MediumScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MediumScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MultiNationalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NationalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NearlyGlobalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RegionalScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Processing_ScaleConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Processing_Scale Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${skos}definition`),
      literal(`Training methods that are intended to provide professional knowledge and expertise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Professional Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${skos}definition`),
      literal(`to create a profile that describes or represents a person`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${skos}prefLabel`),
      literal(`Profiling`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Profiling`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${skos}definition`),
      literal(`A rule describing a prohibition to perform an activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${skos}prefLabel`),
      literal(`Prohibition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Prohibition`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${dcterms}created`),
      literal(`2019-11-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Rudy Jacob`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-14`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing personalised recommendations for events`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${skos}prefLabel`),
      literal(`Provide Event Recommendations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${dcterms}created`),
      literal(`2019-11-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Rudy Jacob`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-14`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing personalised recommendations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${skos}prefLabel`),
      literal(`Provide Personalised Recommendations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-14`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing product recommendations e.g. suggest similar products`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${skos}prefLabel`),
      literal(`Provide Product Recommendations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${skos}related`),
      namedNode(`${ns10}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns34}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`Pseudonymisation means the processing of personal data in such a manner that the personal data can no longer be attributed to a specific data subject without the use of additional information, provided that such additional information is kept separately and is subject to technical and organisational measures to ensure that the personal data are not attributed to an identified or identifiable natural person;`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${dcterms}creator`),
      literal(`2022-10-14`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${skos}definition`),
      literal(`to replace personal identifiable information by artificial identifiers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${skos}prefLabel`),
      literal(`Pseudonymise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Pseudonymise`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${skos}definition`),
      literal(`Personal Data that has undergone a pseudonymisation process or a partial (incomplete) anonymisation process such that it is still considered Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${skos}prefLabel`),
      literal(`Pseudonymised Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PseudonymisedData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${skos}definition`),
      literal(`A source of data that is publicly accessible or available`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${skos}note`),
      literal(`The term 'Public' is used here in a broad sense. Actual consideration of what is 'Public Data' can vary based on several contextual or jurisdictional factors such as  definition of open, methods of access, permissions and licenses.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${skos}prefLabel`),
      literal(`Public Data Source`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicDataSource`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${skos}definition`),
      literal(`Processing is necessary or beneficial for interest of the public or society at large`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${skos}prefLabel`),
      literal(`Public Interest`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicInterest`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is or can be accessed by the public`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Public Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing and conducting public relations processes, including creating goodwill for the organisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${skos}prefLabel`),
      literal(`Public Relations`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PublicRelations`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0006`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0009`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0010`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0014`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}definition`),
      literal(`The purpose of processing personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AccountManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RecordManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}prefLabel`),
      literal(`Purpose`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Purpose`),
      namedNode(`${skos}related`),
      namedNode(`${ns32}AnyPurpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AcademicResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AccountManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Advertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AntiTerrorismOperations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CommercialResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CommunicationForCustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CommunicationManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CounterMoneyLaundering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CreditChecking`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerCare`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerClaimsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerOrderManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerRelationshipManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CustomerSolvencyMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DirectMarketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DisputeManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EnforceAccessControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EnforceSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EstablishContractualAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FraudPreventionAndDetection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FulfilmentOfContractualObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FulfilmentOfObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HumanResourceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IdentityVerification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ImproveExistingProductsAndServices`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ImproveInternalCRMProcesses`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IncreaseServiceRobustness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InternalResourceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LegalCompliance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MaintainCreditCheckingDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MaintainCreditRatingDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MaintainFraudDatabase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MemberPartnerManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OptimiseUserInterface`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OrganisationComplianceManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OrganisationGovernance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OrganisationRiskManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PaymentManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonnelHiring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonnelManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PersonnelPayment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProvideEventRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ProvideProductRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PublicRelations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RecordManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RepairImpairments`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Sector`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VendorPayment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPurpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasSector`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}PurposesConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Purposes Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${skos}definition`),
      literal(`Cryptographic methods that utilise quantum mechanical properties to perform cryptographic tasks`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${skos}prefLabel`),
      literal(`Quantum Cryptography`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${skos}definition`),
      literal(`to query or make enquiries over data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${skos}prefLabel`),
      literal(`Query`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Query`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${skos}definition`),
      literal(`A pseudonymisation method where identifiers are substituted by a number chosen by a Random Number Generator (RNG)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${skos}prefLabel`),
      literal(`RNG Pseudonymisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is random or unknown`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Random Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RandomLocation`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns35}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0019`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}definition`),
      literal(`Entities that receive personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataImporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}note`),
      literal(`A recipient of personal data can be used to indicate any entity that receives personal data. This can be a Third Party, Processor (GDPR), or even a Controller.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}prefLabel`),
      literal(`Recipient`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${skos}related`),
      namedNode(`${ns32}AnyRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Recipient`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${skos}definition`),
      literal(`to make a record (especially media)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${skos}prefLabel`),
      literal(`Record`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Record`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Obtain`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with manage creation, storage, and use of records relevant to operations, events, and processes e.g. to store logs or access requests`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${skos}note`),
      literal(`This purpose relates specifiaclly for record creation and management. This can be combined or used along with other purposes to express intentions such as records for legal compliance or vendor payments.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Record Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${skos}definition`),
      literal(`Records of activities within some context such as maintainence tasks or governance functions`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${skos}prefLabel`),
      literal(`Records of Activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RecordsOfActivities`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${skos}definition`),
      literal(`A region is an area or site that is considered a location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${skos}prefLabel`),
      literal(`Region`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Region`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${skos}definition`),
      literal(`An authority tasked with overseeing legal compliance for a region`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`Regional Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalAuthority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${skos}definition`),
      literal(`Geographic coverage spanning a specific region or regions`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${skos}prefLabel`),
      literal(`Regional Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegionalScale`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${skos}definition`),
      literal(`A ROPA is a document maintained by Data Controllers detailing processing activities carried out under their responsibility`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${skos}note`),
      literal(`Tied to compliance processes and documents, decide how to specify those`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${skos}prefLabel`),
      literal(`Register of Processing Activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegisterOfProcessingActivities`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${skos}definition`),
      literal(`Policy regarding repetition or renewal of existing certification(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${skos}prefLabel`),
      literal(`Regularity of Re-certification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RegularityOfRecertification`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Relation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Relation`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}semanticRelation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Relation`),
      namedNode(`${skos}prefLabel`),
      literal(`Relation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${skos}definition`),
      literal(`Location is remote i.e. not local`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CloudLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Remote Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RemoteLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationLocality`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}definition`),
      literal(`to destruct or erase data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Destruct`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Erase`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${skos}prefLabel`),
      literal(`Remove`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Remove`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns20}GConsent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${skos}definition`),
      literal(`The state where a previously given consent has been 'renewed' or 'refreshed' or 'reaffirmed' to form a new instance of given consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${skos}note`),
      literal(`An example of this state is when a previously given consent has expired, and the individual is presented a notice regarding continuing associated processing operations - to which they agree. This state can be useful to keep track of 'reconfirmed' or 'refreshed' consent within consent records, assist notices and contextual agents to create better consenting dialogues, and assist with specific legal obligations related to subsequent consenting`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${skos}prefLabel`),
      literal(`Renewed Consent Given`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RenewedConsentGiven`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ConsentStatusValidForProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with identifying, rectifying, or otherwise undertaking activities intended to fix or repair impairments to existing functionalities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${skos}note`),
      literal(`An example of identifying and rectifying impairments is the process of finding and fixing errors in products, commonly referred to as debugging`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${skos}prefLabel`),
      literal(`Repair Impairments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RepairImpairments`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns36}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${skos}definition`),
      literal(`A representative of a legal entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${skos}prefLabel`),
      literal(`Representative`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Representative`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${skos}definition`),
      literal(`State of a request being accepted towards fulfilment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAccepted`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${skos}definition`),
      literal(`State of a request being acknowledged`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Acknowledged`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${skos}definition`),
      literal(`State of a request being delayed towards fulfilment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Action Delayed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${skos}definition`),
      literal(`State of a request being fulfilled`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Fulfilled`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${skos}definition`),
      literal(`State of a request being initiated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Initiated`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestInitiated`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${skos}definition`),
      literal(`State of a request being rejected towards non-fulfilment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Rejected`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRejected`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${skos}definition`),
      literal(`State of a request's required action having been performed by the other party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Required Action Performed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${skos}definition`),
      literal(`State of a request requiring an action to be performed from another party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Requires Action`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}definition`),
      literal(`Status associated with requests`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestAccepted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestInitiated`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestRejected`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${skos}definition`),
      literal(`State of a request's status being queried`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Status Query`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${skos}definition`),
      literal(`State of a request being unfulfilled`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${skos}prefLabel`),
      literal(`Request Unfulfilled`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with delivering services as requested by user or consumer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DeliveryOfGoods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}note`),
      literal(`The use of 'request' here includes where an user explicitly asks for the service and also when an established contract requires the provision of the service`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${skos}prefLabel`),
      literal(`Requested Service Provision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${skos}definition`),
      literal(`Indication of 'required' or 'necessary'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${skos}prefLabel`),
      literal(`Required`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Required`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Necessity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting research and development for new methods, products, or services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AcademicResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CommercialResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NonCommercialResearch`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${skos}prefLabel`),
      literal(`Research and Development`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ResearchAndDevelopment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${skos}definition`),
      literal(`to apply a restriction on the processsing of specific records`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${skos}prefLabel`),
      literal(`Restrict`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Restrict`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${skos}definition`),
      literal(`to retrieve data, often in an automated manner`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${skos}prefLabel`),
      literal(`Retrieve`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Retrieve`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Use`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${skos}definition`),
      literal(`Procedures to review impact assessments in terms of continued validity, adequacy for intended purposes, and conformance of processes with findings`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Review Impact Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${skos}definition`),
      literal(`A procedure or process that reviews the correctness and validity of other measures and processes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ReviewImpactAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${skos}prefLabel`),
      literal(`Review Procedure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ReviewProcedure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}definition`),
      literal(`The right(s) applicable, provided, or expected`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}definition`),
      literal(`The right(s) applicable, provided, or expected.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActiveRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PassiveRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}note`),
      literal(`A 'right' is a legal, social, or ethical principle of freedom or entitlement which dictate the norms regarding what is allowed or owed.. Rights as a concept encompass a broad area of norms and entities, and are not specific to Individuals or Data Protection / Privacy. For individual specific rights, see dpv:DataSubjectRight`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Right`),
      namedNode(`${skos}prefLabel`),
      literal(`Right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${skos}definition`),
      literal(`An activity representing an exercising of an active right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${skos}note`),
      literal(`There may be multiple activities associated with exercising and fulfilling rights. See the RightExerciseRecord concept for record-keeping of such activities in a cohesive manner.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(`${skos}prefLabel`),
      literal(`Right Exercise Activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${skos}definition`),
      literal(`Information associated with exercising of an active right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${skos}note`),
      literal(`This concept is intended for providing information regarding a right exercise. For specific instances of such exercises, see RightExerciseActivity and RightExerciseRecord.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`Right Exercise Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Record`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${skos}definition`),
      literal(`Record of a Right being exercised`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${skos}note`),
      literal(`This concept represents a record of one or more right exercise activities, such as those associated with a single data subject or service or entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${skos}prefLabel`),
      literal(`Right Exercise Record`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Record`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${skos}definition`),
      literal(`Notice provided regarding fulfilment of a right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${skos}note`),
      literal(`This notice is associated with situations where information is provided with the intention of progressing the fulfilment of a right. For example, a notice asking for more information regarding the scope of the right, or providing information on where to access the data provided under a right.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`Right Fulfilment Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${skos}definition`),
      literal(`Notice provided regarding non-fulfilment of a right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${skos}note`),
      literal(`This notice is associated with situations where information is provided with the intention of communicating non-fulfilment of a right. For example, to provide justifications on why a right could not be fulfilled or providing information about another entity  who should be approached for exercising this right.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`Right Non-Fulfilment Notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActiveRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSubjectRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PassiveRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RightExerciseActivity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RightExerciseRecord`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RightFulfilmentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RightNonFulfilmentNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isExercisedAt`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RightsConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Rights Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${skos}definition`),
      literal(`A risk or possibility or uncertainty of negative effects, impacts, or consequences.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${skos}note`),
      literal(`Risks can be associated with one or more different concepts such as purpose, processing, personal data, technical or organisational measure.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Risk`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Benefit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsequenceAsSideEffect`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsequenceOfFailure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConsequenceOfSuccess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Damage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Detriment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Harm`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Likelihood`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MaterialDamage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonMaterialDamage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RiskLevel`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Severity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasConsequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasImpact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasImpactOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasLikelihood`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRisk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasSeverity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${skos}definition`),
      literal(`The magnitude of a risk expressed as an indication to aid in its management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${skos}note`),
      literal(`Risk Levels can be defined as a combination of different characteristics. For example, ISO 31073:2022 defines it as a combination of consequences and their likelihood. Another example would be the Risk Matrix where Risk Level is defined as a combination of Likelihood and Severity associated with the Risk.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskLevel`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Level`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns18}79637.html`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${skos}definition`),
      literal(`A scheme within the risk management framework specifying the approach, the management components, and resources to be applied to the management of risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Management Plan`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns18}79637.html`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${skos}definition`),
      literal(`A policy or statement of the overall intentions and direction of an organisation related to risk management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Management Policy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns37}iso-31000-risk-management.html`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns18}79637.html`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${skos}definition`),
      literal(`The systematic application of management policies, procedures and practices to the activities of communicating, consulting, establishing the context, and identifying, analysing, evaluating, treating, monitoring, and reviewing risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Management Process`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0029`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${skos}definition`),
      literal(`Measures intended to mitigate, minimise, or prevent risk.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`Risk Mitigation Measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}definition`),
      literal(`A rule describing a process or control that directs or determines if and how an activity should be conducted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Obligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Permission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Prohibition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Rule`),
      namedNode(`${skos}prefLabel`),
      literal(`Rule`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Obligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Permission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Prohibition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPermission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasProhibition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}RulesConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Rules Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}definition`),
      literal(`A safeguard is a precautionary measure for the protection against or mitigation of negative effects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}note`),
      literal(`This concept is relevant given the requirement to assert safeguards in cross-border data transfers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${skos}prefLabel`),
      literal(`Safeguard`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Safeguard`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Safeguard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${skos}definition`),
      literal(`Represents a safeguard used for data transfer. Can include technical or organisational measures.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${skos}prefLabel`),
      literal(`Safeguard for Data Transfer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SafeguardForDataTransfer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Safeguard`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${dcterms}creator`),
      literal(`Rana Saniei`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}definition`),
      literal(`A measurement along some dimension`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}note`),
      literal(`Scales are subjective concepts that need to be defined and interpreted within the context of their application. For example, what would be small within one context could be large within another.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${skos}prefLabel`),
      literal(`Scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scale`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${skos}definition`),
      literal(`Indication of the extent or range or boundaries associated with(in) a context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${skos}prefLabel`),
      literal(`Scope`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Scope`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${dcterms}modified`),
      literal(`2022-11-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves scoring of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${skos}prefLabel`),
      literal(`Scoring of Individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ScoringOfIndividuals`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}EvaluationScoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${skos}definition`),
      literal(`to remove data for some criteria`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${skos}prefLabel`),
      literal(`Screen`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Screen`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Transform`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${skos}definition`),
      literal(`A seal or a mark indicating proof of certification to some certification or standard`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${skos}prefLabel`),
      literal(`Seal`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Seal`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CertificationSeal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with providing searching, querying, or other forms of information retrieval related functionalities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${skos}prefLabel`),
      literal(`Search Functionalities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-11`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${skos}definition`),
      literal(`Indication of 'secondary' or 'minor' or 'auxiliary' importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${skos}prefLabel`),
      literal(`Secondary Importance`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecondaryImportance`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Importance`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${skos}definition`),
      literal(`Use of secret sharing schemes where the secret can only be reconstructed through combination of sufficient number of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${skos}prefLabel`),
      literal(`Secret Sharing Schemes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0010`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${skos}definition`),
      literal(`Sector describes the area of application or domain that indicates or restricts scope for interpretation and application of purpose e.g. Agriculture, Banking`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${skos}note`),
      literal(`There are various sector codes used commonly to indicate the domain of an organisation or business. Examples include NACE (EU), ISIC (UN), SIC and NAICS (USA).`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Sector`),
      namedNode(`${skos}prefLabel`),
      literal(`Sector`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods for entities to jointly compute functions without revealing inputs`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${skos}prefLabel`),
      literal(`Secure Multi-Party Computation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}definition`),
      literal(`Assessment of security intended to identity gaps, vulnerabilities, risks, and effectiveness of controls`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CybersecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Security Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Assessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${skos}definition`),
      literal(`Training intended to increase knowledge regarding security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Security Knowledge Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StaffTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}definition`),
      literal(`Methods that relate to creating and providing security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${skos}prefLabel`),
      literal(`Security Method`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityMethod`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}definition`),
      literal(`Procedures associated with assessing, implementing, and evaluating security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}BackgroundChecks`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RiskManagementPlan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RiskManagementPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RiskManagementProcess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${skos}prefLabel`),
      literal(`Security Procedure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to security roles`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Security Role Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SecurityRoleProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with selling or sharing data or information to third parties`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${skos}note`),
      literal(`Sell here means exchange, submit, or provide in return for direct or indirect compensation. Was subclass of commercial interest, changed to reflect selling something`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${skos}prefLabel`),
      literal(`Sell Data to Third Parties`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with selling or sharing insights obtained from analysis of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${skos}note`),
      literal(`Sell here means exchange, submit, or provide in return for direct or indirect compensation. Was subclass of commercial interest, changed to reflect selling something`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${skos}prefLabel`),
      literal(`Sell Insights from Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with selling products or services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SellDataToThirdParties`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SellInsightsFromData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}note`),
      literal(`Sell here means exchange, submit, or provide in return for direct or indirect compensation.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${skos}prefLabel`),
      literal(`Sell Products`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProducts`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with selling products or services to the user, consumer, or data subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${skos}note`),
      literal(`Sell Products here refers to processing necessary to provide and complete a sale to customers. It should not be confused with providing services with a cost based on an established agreement.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Sell Products to Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SellProductsToDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0015`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}definition`),
      literal(`Personal data that is considered 'sensitive' in terms of privacy and/or impact, and therefore requires additional considerations and/or protection`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}note`),
      literal(`Sensitivity' is a matter of context, and may be defined within legal frameworks. For GDPR, Special categories of personal data are considered a subset of sensitive data. To illustrate the difference between the two, consider the situation where Location data is collected, and which is considered 'sensitive' but not 'special'. As a probable rule, sensitive data require additional considerations whereas special category data requires additional legal basis / justifications.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Sensitive Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with optimisation of services or activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OptimisationForConsumer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OptimisationForController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}note`),
      literal(`Subclass of ServiceProvision since optimisation is usually considered part of providing services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Service Optimisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with providing personalisation within services or product or activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PersonalisedBenefits`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProvidePersonalisedRecommendations`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Service Personalisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Personalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0018`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with providing service or product or activities`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}PaymentManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RepairImpairments`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestedServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SearchFunctionalities`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SellProducts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServiceOptimisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${skos}prefLabel`),
      literal(`Service Provision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceProvision`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with registering users and collecting information required for providing a service`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${skos}note`),
      literal(`An example of service registration is to provide a form that collects information such as preferred language or media format for downloading a movie`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${skos}prefLabel`),
      literal(`Service Registration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceRegistration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${dcterms}modified`),
      literal(`2022-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting analysis and reporting related to usage of services or products`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${skos}note`),
      literal(`Was "UsageAnalytics", prefixed with Service to better reflect scope`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${skos}prefLabel`),
      literal(`Service Usage Analytics`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ServiceUsageAnalytics`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${skos}definition`),
      literal(`The magnitude of being unwanted or having negative effects such as harmful impacts`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${skos}note`),
      literal(`Severity can be associated with Risk, or its Consequences and Impacts`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Severity`),
      namedNode(`${skos}prefLabel`),
      literal(`Severity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${skos}definition`),
      literal(`to give data (or a portion of it) to others`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${skos}prefLabel`),
      literal(`Share`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Share`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${skos}definition`),
      literal(`Use of credentials or processes that enable using one set of credentials to authenticate multiple contexts.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${skos}prefLabel`),
      literal(`Single Sign On`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingleSignOn`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered singular i.e. a specific instance or single item`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Singular Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${skos}definition`),
      literal(`Frequency where occurences are singular i.e. they take place only once`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${skos}prefLabel`),
      literal(`Singular Frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularFrequency`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered singular i.e. a specific data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Singular Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SingularScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered small or limited within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Small Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered small or limited within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Small Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2022-09-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${skos}definition`),
      literal(`Processing that takes place at small scales (as specified by some criteria)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`Small Scale Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SmallScaleProcessing`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}ProcessingScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with conducting marketing through social media`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${skos}prefLabel`),
      literal(`Social Media Marketing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SocialMediaMarketing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Marketing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling; Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${dcterms}modified`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns38}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0015`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Sensitive Personal Data whose use requires specific legal permission or justification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${skos}note`),
      literal(`The term 'special category' is based on GDPR Art.9, but should not be considered as exlusive to it. DPV considers all Special Categories to also be Sensitive, but whose use is either prohibited or regulated and therefore requires additional legal basis for justification.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`Special Category Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SpecialCategoryPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SensitivePersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Data volume that is considered sporadic or sparse within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`Sporadic Data Volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicDataVolume`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${skos}definition`),
      literal(`Frequency where occurences are sporadic or infrequent or sparse`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${skos}prefLabel`),
      literal(`Sporadic Frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicFrequency`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${skos}definition`),
      literal(`Scale of data subjects considered sporadic or sparse within the context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${skos}prefLabel`),
      literal(`Sporadic Scale Of Data Subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SporadicScaleOfDataSubjects`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0017`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}definition`),
      literal(`Practices and policies regarding training of staff members`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CybersecurityTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataProtectionTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}EducationalTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ProfessionalTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityKnowledgeTraining`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${skos}prefLabel`),
      literal(`Staff Training`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StaffTraining`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}definition`),
      literal(`The status or state of something`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${skos}prefLabel`),
      literal(`Status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Status`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityCompleted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityHalted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityNotCompleted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityOngoing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityProposed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditApproved`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditConditionallyApproved`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditNotRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditRejected`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditRequested`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditRequired`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ComplianceIndeterminate`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ComplianceUnknown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ComplianceViolation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Compliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ConformanceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Conformant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Lawful`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}LawfulnessUnkown`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonCompliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NonConformant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PartiallyCompliant`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestAccepted`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestAcknowledged`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestActionDelayed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestFulfilled`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestInitiated`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestRejected`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestRequiredActionPerformed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestRequiresAction`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestStatusQuery`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RequestUnfulfilled`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Unlawful`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasLawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StatusConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Status Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0011`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}definition`),
      literal(`Conditions required or followed regarding storage of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageDeletion`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageDuration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}StorageRestoration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${skos}prefLabel`),
      literal(`Storage Condition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageCondition`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${skos}definition`),
      literal(`Deletion or Erasure of data including any deletion guarantees`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${skos}prefLabel`),
      literal(`Storage Deletion`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDeletion`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration or temporal limitation on storage of personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Storage Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${skos}definition`),
      literal(`Location or geospatial scope where the data is stored`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Storage Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${skos}definition`),
      literal(`Regularity and temporal span of data restoration/backup mechanisms that guarantee that data is preserved`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${skos}prefLabel`),
      literal(`Storage Restoration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}StorageRestoration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${skos}definition`),
      literal(`to keep data for future use`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${skos}prefLabel`),
      literal(`Store`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Store`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Organise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${skos}definition`),
      literal(`to arrange data according to a structure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${skos}prefLabel`),
      literal(`Structure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Structure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Organise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are students`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${skos}prefLabel`),
      literal(`Student`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Student`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${skos}definition`),
      literal(`An agreement outlining conditions, criteria, obligations, responsibilities, and specifics for carrying out processing of personal data between a Data Processor and a Data (Sub-)Processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Sub-Processor Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SubProcessorAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that subscribe to service(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${skos}note`),
      literal(`note: subscriber can be customer or consumer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${skos}prefLabel`),
      literal(`Subscriber`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Subscriber`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns11}adms`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${skos}definition`),
      literal(`An authority tasked with overseeing legal compliance for a supra-national union e.g. EU`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`Supra-National Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalAuthority`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${skos}definition`),
      literal(`A political union of two or more countries with an establishment of common authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${skos}prefLabel`),
      literal(`Supranational Union`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SupraNationalUnion`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptography where the same keys are utilised for encryption and descryption of information`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${skos}prefLabel`),
      literal(`Symmetric Cryptography`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${skos}definition`),
      literal(`Use of symmetric cryptography to encrypt data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${skos}prefLabel`),
      literal(`Symmetric Encryption`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${skos}definition`),
      literal(`Synthetic data reffers to artificially created data such that it is intended to resemble real data (personal or non-personal), but does not refer to any specific identified or identifiable individual, or to the real measure of an observable parameter in the case of non-personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${skos}prefLabel`),
      literal(`Synthetic Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SyntheticData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${dcterms}creator`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${skos}definition`),
      literal(`Processing that involves systematic monitoring of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${skos}prefLabel`),
      literal(`Systematic Monitoring`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}SystematicMonitoring`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ProcessingContext`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-30`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with creating and providing pesonalised advertisement where the personalisation is targeted to a specific individual or group of individuals`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${skos}prefLabel`),
      literal(`Targeted Advertising`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TargetedAdvertising`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}PersonalisedAdvertising`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0016`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}definition`),
      literal(`Technical measures required/followed when processing data of the declared category`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`Technical Measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}definition`),
      literal(`The Technical and Organisational measures used.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`Technical and Organisational Measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-08`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing and providing technical processes and functions necessary for delivering services`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${skos}prefLabel`),
      literal(`Technical Service Provision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TechnicalServiceProvision`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServiceProvision`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ActivityMonitoring`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Anonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AsymmetricCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AsymmetricEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Authentication-ABC`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Authentication-PABC`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}AuthorisationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}BiometricAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CryptographicAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CryptographicKeyManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataBackupProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataRedaction`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DataSanitisationTechnique`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Deidentification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DeterministicPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DifferentialPrivacy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DigitalRightsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DigitalSignatures`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DistributedSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DocumentRandomisedPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}DocumentSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Encryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EncryptionAtRest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EncryptionInTransfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EncryptionInUse`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}EndToEndEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FileSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}FullyRandomisedPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HardwareSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HashFunctions`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HashMessageAuthenticationCode`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}HomomorphicEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}InformationFlowControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}IntrusionDetectionSystem`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MessageAuthenticationCodes`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MobilePlatformSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MonotonicCounterPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}MultiFactorAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NetworkProxyRouting`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}NetworkSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OperatingSystemSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PasswordAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PenetrationTestingMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PhysicalAccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PostQuantumCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivacyPreservingProtocol`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}PrivateInformationRetrieval`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}Pseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}QuantumCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}RNGPseudonymisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecretSharingSchemes`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecureMultiPartyComputation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SingleSignOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SymmetricCryptography`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}SymmetricEncryption`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TrustedComputing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UsageControl`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_MeasuresConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Technical_Measures Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Collection`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}member`),
      namedNode(`${ns3}isPolicyFor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technical_Organisational_MeasuresConcepts`),
      namedNode(`${skos}prefLabel`),
      literal(`Technical_Organisational_Measures Concepts`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${skos}definition`),
      literal(`The technology, technological implementation, or any techniques, skills, methods, and processes used or applied`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${skos}note`),
      literal(`Examples (non-exhaustive) include: Algorithm, Process, Method, Skill, Database, Cookies, Server, Device`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Technology`),
      namedNode(`${skos}prefLabel`),
      literal(`Technology`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that has a fixed temporal duration e.g. 6 months`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Temporal Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TemporalDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Country`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${skos}definition`),
      literal(`Represents a country outside applicable or compatible jurisdiction as outlined in law`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${skos}prefLabel`),
      literal(`Third Country`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdCountry`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Country`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${dcterms}created`),
      literal(`2019-06-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns39}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}definition`),
      literal(`A ‘third party’ means a natural or legal person, public authority, agency or body other than the data subject, controller, processor and people who, under the direct authority of the controller or processor, are authorised to process personal data.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}prefLabel`),
      literal(`Third Party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:ThirdParty`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${skos}scopeNote`),
      literal(`A Third Party can be a Data Source, e.g. when data is collected from an entity that is neither the Controller nor the Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdParty`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${skos}definition`),
      literal(`An agreement outlining conditions, criteria, obligations, responsibilities, and specifics for carrying out processing of personal data between a Data Controller or Processor and a Third Party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${skos}prefLabel`),
      literal(`Third-Party Agreement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartyAgreement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataProcessingAgreement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}5g-cybersecurity-standards`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${skos}definition`),
      literal(`Procedures related to security associated with Third Parties`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${skos}prefLabel`),
      literal(`Third Party Security Procedures`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ThirdPartySecurityProcedures`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are tourists i.e. not citizens and not immigrants`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${skos}prefLabel`),
      literal(`Tourist`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Tourist`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns16}processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${vann}example`),
      namedNode(`${ns13}E0020`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}definition`),
      literal(`to move data from one place to another`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Move`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}prefLabel`),
      literal(`Transfer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${skos}related`),
      namedNode(`${ns17}Transfer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transfer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}definition`),
      literal(`to change the form or nature of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Adapt`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Align`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Alter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Anonymise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Combine`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Filter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Pseudonymise`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Restrict`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Screen`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${skos}prefLabel`),
      literal(`Transform`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transform`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${skos}definition`),
      literal(`to send out data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${skos}prefLabel`),
      literal(`Transmit`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Transmit`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Disclose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods to restrict access and execution to trusted parties and code`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${skos}prefLabel`),
      literal(`Trusted Computing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedComputing`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${skos}definition`),
      literal(`Use of cryptographic methods to restrict access and execution to trusted parties and code within a dedicated execution environment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${skos}prefLabel`),
      literal(`Trusted Execution Environments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedExecutionEnvironments`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-pseudonymisation-advanced-techniques-and-use-cases`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${skos}definition`),
      literal(`Utilisation of a trusted third party to provide or carry out a measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${skos}prefLabel`),
      literal(`Trusted Third Party Utilisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}TrustedThirdPartyUtilisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityProcedure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${skos}definition`),
      literal(`Consent that is uninformed i.e. without requirement to provide sufficient information to make a consenting decision`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${skos}prefLabel`),
      literal(`Uninformed Consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UninformedConsent`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Consent`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${skos}definition`),
      literal(`State of being unlawful or legally non-compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${skos}prefLabel`),
      literal(`Unlawful`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Unlawful`),
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that takes place until a specific event occurs e.g. Account Closure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Until Event Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilEventDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${skos}definition`),
      literal(`Duration that has a fixed end date e.g. 2022-12-31`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`Until Time Duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UntilTimeDuration`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${skos}definition`),
      literal(`Data that has not been verified in terms of accuracy, inconsistency, or quality`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${skos}prefLabel`),
      literal(`Unverified Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UnverifiedData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${skos}definition`),
      literal(`Management of usage, which is intended to be broader than access control and may cover trust, digital rights, or other relevant controls`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${skos}prefLabel`),
      literal(`Usage Control`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UsageControl`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AccessControlMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns14}oj`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}definition`),
      literal(`to use data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Access`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Analyse`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Assess`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Consult`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Match`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Profiling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}Retrieve`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${skos}prefLabel`),
      literal(`Use`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Use`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${skos}definition`),
      literal(`Use of synthetic data to preserve privacy, security, or other effects and side-effects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${skos}prefLabel`),
      literal(`Use of Synthetic Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UseSyntheticData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that use service(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${skos}prefLabel`),
      literal(`User`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}User`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernandez`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${dcterms}creator`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with personalisation of interfaces presented to the user`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${skos}note`),
      literal(`Examples of user-interface personalisation include changing the language to match the locale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${skos}prefLabel`),
      literal(`User Interface Personalisation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}UserInterfacePersonalisation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}ServicePersonalisation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${skos}definition`),
      literal(`Location that is known but is variable e.g. somewhere within a given area`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`Variable Location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VariableLocation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocationFixture`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with manage orders, payment, evaluation, and prospecting related to vendors`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VendorPayment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Vendor Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing payment of vendors`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${skos}prefLabel`),
      literal(`Vendor Payment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorPayment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing records and orders related to vendors`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${skos}prefLabel`),
      literal(`Vendor Records Management`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorRecordsManagement`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}created`),
      literal(`2021-09-01`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`David Hickey`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns21}model-voor-een-register-van-de-verwerkingsactiviteiten`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${skos}definition`),
      literal(`Purposes associated with managing selection, assessment, and evaluation related to vendors`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${skos}prefLabel`),
      literal(`Vendor Selection Assessment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VendorSelectionAssessment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VendorManagement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${skos}definition`),
      literal(`Data that has been verified in terms of accuracy, inconsistency, or quality`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${skos}prefLabel`),
      literal(`Verified Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VerifiedData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or through virtualised environments`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`Virtualisation Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VirtualisationSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}created`),
      literal(`2022-04-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${skos}definition`),
      literal(`Data subjects that are temporary visitors`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${skos}prefLabel`),
      literal(`Visitor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}Visitor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${skos}definition`),
      literal(`Processing is necessary or required to protect vital interests of a data subject or other natural person`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${skos}prefLabel`),
      literal(`Vital Interest`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterest`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Processing is necessary or required to protect vital interests of a data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Vital Interest of Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${dcterms}created`),
      literal(`2021-04-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}VitalInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${skos}definition`),
      literal(`Processing is necessary or required to protect vital interests of a natural person`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}VitalInterestOfDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${skos}prefLabel`),
      literal(`Vital Interest of Natural Person`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VitalInterestOfNaturalPerson`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}VitalInterest`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${skos}definition`),
      literal(`Methods that assess or discover vulnerabilities in a system`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${skos}prefLabel`),
      literal(`Vulnerability Testing Methods`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerabilityTestingMethods`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Data Subjects which should be considered 'vulnerable' and therefore would require additional measures and safeguards`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}AsylumSeeker`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}ElderlyDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}MentallyVulnerableDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}note`),
      literal(`This concept denotes a Data Subject or a group are vulnerable, but not what vulnerability they possess or its context. This information can be provided additionally as comments, or as separate concepts and relations. Proposals for this are welcome.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`Vulnerable Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}VulnerableDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or over web browsers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${skos}prefLabel`),
      literal(`WebBrowser Security`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebBrowserSecurity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or over web-based protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Web Security Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WebSecurityProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${dcterms}source`),
      namedNode(ns15),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${skos}definition`),
      literal(`Security implemented at or over wireless communication protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${skos}prefLabel`),
      literal(`Wireless Security Protocols`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WirelessSecurityProtocols`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}SecurityMethod`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${dcterms}modified`),
      literal(`2020-10-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${vs}term_status`),
      literal(`modified`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${skos}definition`),
      literal(`Location is local and entirely within a device, such as a smartphone`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${skos}prefLabel`),
      literal(`Within Device`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinDevice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${dcterms}created`),
      literal(`2020-10-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${skos}definition`),
      literal(`Location is local and entirely within a physical environment, such as a room`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${skos}prefLabel`),
      literal(`Within Physical Environment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinPhysicalEnvironment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${dcterms}created`),
      literal(`2020-10-06`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${skos}definition`),
      literal(`Location is local and entirely within a virtual environment, such as a shared network directory`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${skos}prefLabel`),
      literal(`Within Virtual Environment`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}WithinVirtualEnvironment`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}LocalLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-17`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${dcterms}source`),
      namedNode(`${ns19}data-protection-engineering`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${skos}definition`),
      literal(`Authentication using Zero-Knowledge proofs`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${skos}prefLabel`),
      literal(`Zero Knowledge Authentication`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}AuthenticationProtocols`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}ZeroKnowledgeAuthentication`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}CryptographicMethods`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${skos}definition`),
      literal(`Indicates the status of activity of specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`has activity status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}ActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J.Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${skos}definition`),
      literal(`Specifies address of a legal entity such as street address or pin code`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${skos}prefLabel`),
      literal(`has address`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAddress`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${skos}definition`),
      literal(`Indicates the logic used in processing such as for automated decision making`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${skos}prefLabel`),
      literal(`has algorithmic logic`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAlgorithmicLogic`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}AlgorithmicLogic`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of a Law`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${skos}prefLabel`),
      literal(`has applicable law`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasApplicableLaw`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Law`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${skos}definition`),
      literal(`Indicates the status of audit associated with specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`has audit status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}AuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of authority for a jurisdiction`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${skos}prefLabel`),
      literal(`has authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasAuthority`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${skos}definition`),
      literal(`Indicates the status of compliance of specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasLawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`has compliance status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}ComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${skos}definition`),
      literal(`Specifies the state or status of consent`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`has consent status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsentStatus`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}ConsentStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${dcterms}modified`),
      literal(`2021-09-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${skos}definition`),
      literal(`Indicates consenquence(s) possible or arising from specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasImpact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${skos}note`),
      literal(`Removed plural suffix for consistency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${skos}prefLabel`),
      literal(`has consequence`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequence`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-24`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${skos}definition`),
      literal(`Indicates the thing (e.g. plan, process, or entity) affected by a consequence`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasImpactOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${skos}prefLabel`),
      literal(`has consequence on`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Consequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J.Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${skos}definition`),
      literal(`Specifies contact details of a legal entity such as phone  or email`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${skos}prefLabel`),
      literal(`has contact`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContact`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${skos}definition`),
      literal(`Indicates a purpose is restricted to the specified context(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${skos}prefLabel`),
      literal(`has context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasContext`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of specified country`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${skos}prefLabel`),
      literal(`has country`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Country`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasCountry`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasLocation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${skos}definition`),
      literal(`Indicates associated with Data (may or may not be personal)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasPersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${skos}prefLabel`),
      literal(`has data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasData`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Data`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Data Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${skos}prefLabel`),
      literal(`has data controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}LegalEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${skos}definition`),
      literal(`Indiciates inclusion or applicability of a LegalEntity in the role of Data Exporter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${skos}prefLabel`),
      literal(`has data exporter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataExporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataExporter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${skos}definition`),
      literal(`Indiciates inclusion or applicability of a LegalEntity in the role of Data Importer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${skos}prefLabel`),
      literal(`has data importer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataImporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataImporter`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${skos}definition`),
      literal(`Indiciates inclusion or applicability of a Data Processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${skos}prefLabel`),
      literal(`has data processor`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${skos}definition`),
      literal(`Specifices an associated data protection officer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${skos}prefLabel`),
      literal(`has data protection officer`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataProtectionOfficer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${skos}definition`),
      literal(`Indicates the source or origin of data being processed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${skos}prefLabel`),
      literal(`has data source`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSource`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataSource`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`has data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${skos}definition`),
      literal(`Indicates the scale of data subjects`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${skos}prefLabel`),
      literal(`has data subject scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${skos}definition`),
      literal(`Indicates the volume of data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${skos}prefLabel`),
      literal(`has data volume`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDataVolume`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDomain`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDomain`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}semanticRelation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDomain`),
      namedNode(`${skos}prefLabel`),
      literal(`has domain`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${skos}definition`),
      literal(`Indicates information about duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${skos}prefLabel`),
      literal(`has duration`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasDuration`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Duration`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}definition`),
      literal(`Indicates inclusion or applicability of an entity to some concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataExporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasRepresentative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}note`),
      literal(`parent property for controller, processor, data subject, authority, etc.?`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${skos}prefLabel`),
      literal(`has entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasEntity`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-16`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${skos}definition`),
      literal(`Indicates the frequency with which something takes place`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${skos}prefLabel`),
      literal(`has frequency`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasFrequency`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Frequency`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${skos}definition`),
      literal(`Indicate the geographic coverage (of specified context)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${skos}prefLabel`),
      literal(`has geographic coverage`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}GeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${skos}definition`),
      literal(`Indicates Involvement of humans in processing such as within automated decision making process`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${skos}note`),
      literal(`Human involvement is also relevant to 'human in the loop'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${skos}prefLabel`),
      literal(`has human involvement`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasHumanInvolvement`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}HumanInvolvement`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-25`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J.Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${skos}definition`),
      literal(`Indicates an identifier associated for identification or reference`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${skos}prefLabel`),
      literal(`has identifier`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIdentifier`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasConsequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${skos}definition`),
      literal(`Indicates impact(s) possible or arising as consequences from specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${skos}prefLabel`),
      literal(`has impact`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpact`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasConsequence`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}creator`),
      literal(`Fajar Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${skos}definition`),
      literal(`Indicates the thing (e.g. plan, process, or entity) affected by an impact`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${skos}prefLabel`),
      literal(`has impact on`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Impact`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasImpactOn`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasConsequenceOn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${skos}definition`),
      literal(`Specifies the method by which an entity has indicated the specific context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${skos}prefLabel`),
      literal(`has indication method`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasIndicationMethod`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${skos}definition`),
      literal(`Indicates inclusion or applicability of a Joint Data Controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${skos}prefLabel`),
      literal(`has joint data controllers`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}JointDataControllers`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJointDataControllers`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of specified jurisdiction`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${skos}prefLabel`),
      literal(`has jurisdiction`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJurisdiction`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${skos}definition`),
      literal(`Indicates a justification for specified concept or context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:hasJustification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${skos}prefLabel`),
      literal(`has justification`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying a justification for non-fulfilment of Right Exercise`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasJustification`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Justification`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${skos}definition`),
      literal(`Indicates the status of being lawful or legally compliant`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${skos}prefLabel`),
      literal(`has lawfulness`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Lawfulness`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLawfulness`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${skos}definition`),
      literal(`Indicates use or applicability of a Legal Basis`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${skos}prefLabel`),
      literal(`has legal basis`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLegalBasis`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}LegalBasis`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${skos}definition`),
      literal(`Indicates the likelihood associated with a concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${skos}prefLabel`),
      literal(`has likelihood`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLikelihood`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Likelihood`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${skos}definition`),
      literal(`Indicates information about location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${skos}prefLabel`),
      literal(`has location`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasLocation`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Location`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J.Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${skos}definition`),
      literal(`Specifies name of a legal entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${skos}prefLabel`),
      literal(`has name`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasName`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${skos}definition`),
      literal(`Indicates the use or applicability of a Notice for the specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${skos}prefLabel`),
      literal(`has notice`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Notice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasNotice`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${skos}definition`),
      literal(`Specifying applicability or inclusion of an obligation rule within specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${skos}prefLabel`),
      literal(`has obligation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Obligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasObligation`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${skos}definition`),
      literal(`Indicates use or applicability of Organisational measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`has organisational measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}OrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${skos}definition`),
      literal(`Indicates an outcome of specified concept or context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${skos}prefLabel`),
      literal(`has outcome`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasOutcome`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${skos}definition`),
      literal(`Specifying applicability or inclusion of a permission rule within specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${skos}prefLabel`),
      literal(`has permission`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Permission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPermission`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${skos}prefLabel`),
      literal(`has personal data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}PersonalData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalData`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasData`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Personal Data Handling`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${skos}prefLabel`),
      literal(`has personal data handling`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPersonalDataHandling`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}PersonalDataHandling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${skos}definition`),
      literal(`Indicates policy applicable or used`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${skos}prefLabel`),
      literal(`has policy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPolicy`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${skos}prefLabel`),
      literal(`has processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessing`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Processing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${skos}definition`),
      literal(`Indicates the use or extent of automation associated with processing`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${skos}prefLabel`),
      literal(`has processing automation`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProcessingAutomation`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}AutomationOfProcessing`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${skos}definition`),
      literal(`Specifying applicability or inclusion of a prohibition rule within specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${skos}prefLabel`),
      literal(`has prohibition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Prohibition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasProhibition`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${skos}definition`),
      literal(`Indicates association with Purpose`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${skos}prefLabel`),
      literal(`has purpose`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasPurpose`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Purpose`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRange`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRange`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}semanticRelation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRange`),
      namedNode(`${skos}prefLabel`),
      literal(`has range`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}definition`),
      literal(`Indicates Recipient of Personal Data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataImporter`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataProcessor`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:hasRecipient`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}prefLabel`),
      literal(`has recipient`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${skos}scopeNote`),
      literal(`Indicates the Recipient of a Right Exercise Activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Recipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipient`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${skos}definition`),
      literal(`Indiciates inclusion or applicability of a Data Controller as a Recipient of persona data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${skos}prefLabel`),
      literal(`has recipient data controller`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}DataController`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientDataController`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${skos}definition`),
      literal(`Indiciates inclusion or applicability of a Third Party as a Recipient of persona data`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${skos}prefLabel`),
      literal(`has recipient third party`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}ThirdParty`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRecipientThirdParty`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasRecipient`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${skos}definition`),
      literal(`Indicates the relation between specified Entity and Data Subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${skos}prefLabel`),
      literal(`has relation with data subject`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRelationWithDataSubject`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J.Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${skos}definition`),
      literal(`Specifies representative of the legal entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataProtectionOfficer`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${skos}prefLabel`),
      literal(`has representative`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRepresentative`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${skos}definition`),
      literal(`Indicates the associated risk is the remaining or residual risk from applying mitigation measures or treatments to this risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${skos}prefLabel`),
      literal(`has residual risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResidualRisk`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${skos}definition`),
      literal(`Specifies the indicated entity is responsible within some context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${skos}prefLabel`),
      literal(`has responsible entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasResponsibleEntity`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${skos}definition`),
      literal(`Indicates use or applicability of Right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${skos}prefLabel`),
      literal(`has right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRight`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Right`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of Risk for this concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability of Risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${skos}prefLabel`),
      literal(`has risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRisk`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${skos}definition`),
      literal(`Indicates the associated risk level associated with a risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${skos}prefLabel`),
      literal(`has risk level`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRiskLevel`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}RiskLevel`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}definition`),
      literal(`Specifying applicability or inclusion of a rule within specified context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasObligation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasPermission`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasProhibition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${skos}prefLabel`),
      literal(`has rule`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Context`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasRule`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Rule`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}definition`),
      literal(`Indicates the scale of specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataSubjectScale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasDataVolume`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasGeographicCoverage`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${skos}prefLabel`),
      literal(`has scale`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScale`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Scale`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${skos}definition`),
      literal(`Indicates the scope of specified concept or context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${skos}prefLabel`),
      literal(`has scope`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasScope`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Scope`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${skos}definition`),
      literal(`Indicates the purpose is associated with activities in the indicated (Economic) Sector(s)`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${skos}prefLabel`),
      literal(`has sector`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSector`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Sector`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${skos}definition`),
      literal(`Indicates the severity associated with a concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${skos}prefLabel`),
      literal(`has severity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasSeverity`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Severity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${dcterms}created`),
      literal(`2022-05-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}definition`),
      literal(`Indicates the status of specified concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasActivityStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasAuditStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasComplianceStatus`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:hasStatus`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}prefLabel`),
      literal(`has status`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${skos}scopeNote`),
      literal(`Indicates the status of a Right Exercise Activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStatus`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Status`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}created`),
      literal(`2022-08-13`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}creator`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${dcterms}source`),
      namedNode(ns33),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${skos}definition`),
      literal(`Indicates information about storage condition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${skos}prefLabel`),
      literal(`has storage condition`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasStorageCondition`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}StorageCondition`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${skos}definition`),
      literal(`Indicates use or applicability of Technical measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`has technical measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}TechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2019-04-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Javier Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${dcterms}modified`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}definition`),
      literal(`Indicates use or applicability of Technical or Organisational measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasPolicy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}hasTechnicalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}narrower`),
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`has technical and organisational measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}TechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${skos}definition`),
      literal(`Indicates applicability or relevance of a 'third country'`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${skos}prefLabel`),
      literal(`has third country`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}ThirdCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}hasThirdCountry`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasCountry`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${skos}definition`),
      literal(`Indicates the specified concepts is 'after' this concept in some context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:isAfter`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${skos}prefLabel`),
      literal(`is after`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying a RightExerciseActivity occurs before another RightExerciseActivity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAfter`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-19`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${skos}definition`),
      literal(`Indicates area, scope, or applicability of an Authority`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${skos}prefLabel`),
      literal(`is authority for`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Authority`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isAuthorityFor`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${dcterms}created`),
      literal(`2022-03-02`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P. Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${skos}definition`),
      literal(`Indicates the specified concepts is 'before' this concept in some context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:isBefore`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${skos}prefLabel`),
      literal(`is before`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${skos}scopeNote`),
      literal(`Specifying a RightExerciseActivity occurs before another RightExerciseActivity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isBefore`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${dcterms}created`),
      literal(`2022-10-22`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${skos}definition`),
      literal(`Indicates context or information about exercising a right`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${skos}prefLabel`),
      literal(`is exercised at`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}ActiveRight`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isExercisedAt`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}RightExerciseNotice`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}created`),
      literal(`2019-05-07`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${dcterms}modified`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}definition`),
      literal(`Indicates implementation details such as entities or agents`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}note`),
      literal(`The use of 'entity' is inclusive of entities (e.g. Data Processor) as well as 'agent' (e.g. DPO). For indicating technological implementation, the property isImplementedByTechnology should be used.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}prefLabel`),
      literal(`dpv:isImplementedByEntity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}prefLabel`),
      literal(`is implemented by entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${skos}scopeNote`),
      literal(`Indicates the Entity that implements or performs a Right Exercise Activity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedByEntity`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}creator`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${dcterms}modified`),
      literal(`2022-06-15`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${vs}term_status`),
      literal(`changed`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${skos}definition`),
      literal(`Indicates implementation details such as technologies or processes`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${skos}note`),
      literal(`The term 'technology' is inclusive of technologies, processes, and methods.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${skos}prefLabel`),
      literal(`is implemented using technology`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isImplementedUsingTechnology`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Technology`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${skos}definition`),
      literal(`Specifies the temporal information for when the entity has indicated the specific context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${skos}prefLabel`),
      literal(`is indicated at time`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedAtTime`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${dcterms}created`),
      literal(`2022-06-21`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${skos}definition`),
      literal(`Specifies entity who indicates the specific context`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${skos}prefLabel`),
      literal(`is indicated by`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isIndicatedBy`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}semanticRelation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isInstanceOf`),
      namedNode(`${skos}prefLabel`),
      literal(`isInstanceOf`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${dcterms}created`),
      literal(`2022-02-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${skos}definition`),
      literal(`Indicate a risk is mitigated by specified measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${skos}prefLabel`),
      literal(`is mitigated by measure`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isMitigatedByMeasure`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasTechnicalOrganisationalMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${dcterms}created`),
      literal(`2022-01-26`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${skos}definition`),
      literal(`Indicates the context or application of policy`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${skos}prefLabel`),
      literal(`is policy for`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Policy`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isPolicyFor`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${dcterms}created`),
      literal(`2022-11-09`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${skos}broader`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${skos}definition`),
      literal(`Indicates the entity is a representative for specified entity`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${skos}prefLabel`),
      literal(`is representative for`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Representative`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Entity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isRepresentativeFor`),
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${ns3}hasEntity`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${dcterms}created`),
      literal(`2022-07-20`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${dcterms}creator`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${dcterms}creator`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${dcterms}creator`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${skos}definition`),
      literal(`Indicates this risk is the remaining or residual risk from applying mitigation measures or treatments to specified risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${skos}prefLabel`),
      literal(`is residual risk of`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isResidualRiskOf`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${rdfs}subPropertyOf`),
      namedNode(`${skos}broader`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}isSubTypeOf`),
      namedNode(`${skos}prefLabel`),
      literal(`isSubTypeOf`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${dcterms}created`),
      literal(`2020-11-04`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${skos}Concept`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${rdf}type`),
      namedNode(`${ns3}Relation`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${rdfs}isDefinedBy`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${vs}term_status`),
      literal(`accepted`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${skos}definition`),
      literal(`Indicates risks mitigated by this concept`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${skos}inScheme`),
      namedNode(ns3),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${skos}prefLabel`),
      literal(`mitigates risk`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${ns3}hasDomain`),
      namedNode(`${ns3}RiskMitigationMeasure`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns3}mitigatesRisk`),
      namedNode(`${ns3}hasRange`),
      namedNode(`${ns3}Risk`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}abstract`),
      literal(`The Data Privacy Vocabulary (DPV) provides terms (classes and properties) to represent information about legally compliant personal data handling, which includes purposes, processing, personal data, technical and organisational measures.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Beatriz Esteves`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Bert Bos`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Bud Bruegger`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Elmar Kiesling`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Eva Schlehahn`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Fajar J. Ekaputra`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Georg P Krog`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Javier D. Fernández`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Julian Flake`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Mark Lizar`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Paul Ryan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Piero Bonatti`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Ramisa Gachpaz Hamed`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Rigo Wenning`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Rob Brennan`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}contributor`),
      literal(`Simon Steyskal`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}created`),
      literal(`2019-06-18`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}creator`),
      literal(`Axel Polleres`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}creator`),
      literal(`Harshvardhan J. Pandit`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}description`),
      literal(`The Data Privacy Vocabulary (DPV) provides terms (classes and properties) to represent information about legally compliant personal data handling, which includes purposes, processing, personal data, technical and organisational measures.`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}license`),
      namedNode(`${ns40}doc-license`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}modified`),
      literal(`2022-12-05`, namedNode(`${xsd}date`)),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}source`),
      namedNode(ns28),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${dcterms}title`),
      literal(`Data Privacy Vocabulary`, 'en'),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${vann}preferredNamespacePrefix`),
      literal(`dpv`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${vann}preferredNamespaceUri`),
      literal(`https://w3id.org/dpv#`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${rdf}type`),
      namedNode(`${owl}Ontology`),
      namedNode(ns3)
    ),
    quad(
      namedNode(`${ns20}dpv`),
      namedNode(`${owl}versionInfo`),
      literal(`1`),
      namedNode(ns3)
    ),

  ]
}
